//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from RecipeLanguage.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="RecipeLanguageParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IRecipeLanguageListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecipeLanguageParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] RecipeLanguageParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecipeLanguageParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] RecipeLanguageParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecipeLanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] RecipeLanguageParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecipeLanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] RecipeLanguageParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecipeLanguageParser.askStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAskStatement([NotNull] RecipeLanguageParser.AskStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecipeLanguageParser.askStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAskStatement([NotNull] RecipeLanguageParser.AskStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecipeLanguageParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclaration([NotNull] RecipeLanguageParser.DeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecipeLanguageParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclaration([NotNull] RecipeLanguageParser.DeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecipeLanguageParser.ingredientDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIngredientDeclaration([NotNull] RecipeLanguageParser.IngredientDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecipeLanguageParser.ingredientDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIngredientDeclaration([NotNull] RecipeLanguageParser.IngredientDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecipeLanguageParser.arrayDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayDeclaration([NotNull] RecipeLanguageParser.ArrayDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecipeLanguageParser.arrayDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayDeclaration([NotNull] RecipeLanguageParser.ArrayDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecipeLanguageParser.speakStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSpeakStatement([NotNull] RecipeLanguageParser.SpeakStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecipeLanguageParser.speakStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSpeakStatement([NotNull] RecipeLanguageParser.SpeakStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecipeLanguageParser.shareStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterShareStatement([NotNull] RecipeLanguageParser.ShareStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecipeLanguageParser.shareStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitShareStatement([NotNull] RecipeLanguageParser.ShareStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecipeLanguageParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignment([NotNull] RecipeLanguageParser.AssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecipeLanguageParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignment([NotNull] RecipeLanguageParser.AssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecipeLanguageParser.recipeStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRecipeStatement([NotNull] RecipeLanguageParser.RecipeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecipeLanguageParser.recipeStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRecipeStatement([NotNull] RecipeLanguageParser.RecipeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecipeLanguageParser.methodStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodStatement([NotNull] RecipeLanguageParser.MethodStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecipeLanguageParser.methodStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodStatement([NotNull] RecipeLanguageParser.MethodStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecipeLanguageParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCall([NotNull] RecipeLanguageParser.FunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecipeLanguageParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCall([NotNull] RecipeLanguageParser.FunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecipeLanguageParser.loopStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLoopStatement([NotNull] RecipeLanguageParser.LoopStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecipeLanguageParser.loopStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLoopStatement([NotNull] RecipeLanguageParser.LoopStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecipeLanguageParser.conditionalStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditionalStatement([NotNull] RecipeLanguageParser.ConditionalStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecipeLanguageParser.conditionalStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditionalStatement([NotNull] RecipeLanguageParser.ConditionalStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecipeLanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] RecipeLanguageParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecipeLanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] RecipeLanguageParser.ExpressionContext context);
}
