//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from RecipeLanguage.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class RecipeLanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		RECIPE=1, ID=2, DO=3, METHOD=4, LEFTPARENTHESIS=5, RIGHTPARENTHESIS=6, 
		AS=7, INTEGER=8, INGREDIENT=9, STRING=10, SEMICOLON=11, ASK=12, ASSIGN=13, 
		STRINGLIT=14, PLUS=15, SPEAK=16, SHARE=17, INTEGERLIT=18, DONE=19, WS=20;
	public const int
		RULE_recipe = 0, RULE_statement_list = 1, RULE_statement = 2, RULE_method = 3, 
		RULE_ingredient = 4, RULE_ask = 5, RULE_speak = 6, RULE_assignment = 7;
	public static readonly string[] ruleNames = {
		"recipe", "statement_list", "statement", "method", "ingredient", "ask", 
		"speak", "assignment"
	};

	private static readonly string[] _LiteralNames = {
		null, "'RECIPE'", "'ID'", "'DO'", "'METHOD'", "'LEFTPARENTHESIS'", "'RIGHTPARENTHESIS'", 
		"'AS'", "'INTEGER'", "'INGREDIENT'", "'STRING'", "'SEMICOLON'", "'ASK'", 
		"'ASSIGN'", "'STRINGLIT'", "'PLUS'", "'SPEAK'", "'SHARE'", "'INTEGERLIT'", 
		"'DONE'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "RECIPE", "ID", "DO", "METHOD", "LEFTPARENTHESIS", "RIGHTPARENTHESIS", 
		"AS", "INTEGER", "INGREDIENT", "STRING", "SEMICOLON", "ASK", "ASSIGN", 
		"STRINGLIT", "PLUS", "SPEAK", "SHARE", "INTEGERLIT", "DONE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RecipeLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RecipeLanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RecipeLanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RecipeLanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RecipeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECIPE() { return GetToken(RecipeLanguageParser.RECIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RecipeLanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(RecipeLanguageParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DONE() { return GetToken(RecipeLanguageParser.DONE, 0); }
		public RecipeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recipe; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.EnterRecipe(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.ExitRecipe(this);
		}
	}

	[RuleVersion(0)]
	public RecipeContext recipe() {
		RecipeContext _localctx = new RecipeContext(Context, State);
		EnterRule(_localctx, 0, RULE_recipe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			Match(RECIPE);
			State = 17;
			Match(ID);
			State = 18;
			Match(DO);
			State = 19;
			statement_list();
			State = 20;
			Match(DONE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(RecipeLanguageParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DONE() { return GetToken(RecipeLanguageParser.DONE, 0); }
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement_list);
		int _la;
		try {
			State = 31;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
			case METHOD:
			case INGREDIENT:
			case ASK:
			case SPEAK:
			case SHARE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 22;
					statement();
					}
					}
					State = 25;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 201236L) != 0) );
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 27;
				Match(DO);
				State = 28;
				statement_list();
				State = 29;
				Match(DONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IngredientContext ingredient() {
			return GetRuleContext<IngredientContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AskContext ask() {
			return GetRuleContext<AskContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpeakContext speak() {
			return GetRuleContext<SpeakContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(RecipeLanguageParser.SHARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGERLIT() { return GetToken(RecipeLanguageParser.INTEGERLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(RecipeLanguageParser.SEMICOLON, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 41;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case METHOD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 33;
				method();
				}
				break;
			case INGREDIENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 34;
				ingredient();
				}
				break;
			case ASK:
				EnterOuterAlt(_localctx, 3);
				{
				State = 35;
				ask();
				}
				break;
			case SPEAK:
				EnterOuterAlt(_localctx, 4);
				{
				State = 36;
				speak();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 5);
				{
				State = 37;
				assignment();
				}
				break;
			case SHARE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 38;
				Match(SHARE);
				State = 39;
				Match(INTEGERLIT);
				State = 40;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(RecipeLanguageParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RecipeLanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPARENTHESIS() { return GetToken(RecipeLanguageParser.LEFTPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPARENTHESIS() { return GetToken(RecipeLanguageParser.RIGHTPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(RecipeLanguageParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(RecipeLanguageParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(RecipeLanguageParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DONE() { return GetToken(RecipeLanguageParser.DONE, 0); }
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 6, RULE_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			Match(METHOD);
			State = 44;
			Match(ID);
			State = 45;
			Match(LEFTPARENTHESIS);
			State = 46;
			Match(RIGHTPARENTHESIS);
			State = 47;
			Match(AS);
			State = 48;
			Match(INTEGER);
			State = 49;
			Match(DO);
			State = 50;
			statement_list();
			State = 51;
			Match(DONE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IngredientContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INGREDIENT() { return GetToken(RecipeLanguageParser.INGREDIENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RecipeLanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(RecipeLanguageParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RecipeLanguageParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(RecipeLanguageParser.SEMICOLON, 0); }
		public IngredientContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ingredient; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.EnterIngredient(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.ExitIngredient(this);
		}
	}

	[RuleVersion(0)]
	public IngredientContext ingredient() {
		IngredientContext _localctx = new IngredientContext(Context, State);
		EnterRule(_localctx, 8, RULE_ingredient);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			Match(INGREDIENT);
			State = 54;
			Match(ID);
			State = 55;
			Match(AS);
			State = 56;
			Match(STRING);
			State = 57;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AskContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASK() { return GetToken(RecipeLanguageParser.ASK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPARENTHESIS() { return GetToken(RecipeLanguageParser.LEFTPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RecipeLanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPARENTHESIS() { return GetToken(RecipeLanguageParser.RIGHTPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(RecipeLanguageParser.SEMICOLON, 0); }
		public AskContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ask; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.EnterAsk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.ExitAsk(this);
		}
	}

	[RuleVersion(0)]
	public AskContext ask() {
		AskContext _localctx = new AskContext(Context, State);
		EnterRule(_localctx, 10, RULE_ask);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			Match(ASK);
			State = 60;
			Match(LEFTPARENTHESIS);
			State = 61;
			Match(ID);
			State = 62;
			Match(RIGHTPARENTHESIS);
			State = 63;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpeakContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPEAK() { return GetToken(RecipeLanguageParser.SPEAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPARENTHESIS() { return GetToken(RecipeLanguageParser.LEFTPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RecipeLanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPARENTHESIS() { return GetToken(RecipeLanguageParser.RIGHTPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(RecipeLanguageParser.SEMICOLON, 0); }
		public SpeakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_speak; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.EnterSpeak(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.ExitSpeak(this);
		}
	}

	[RuleVersion(0)]
	public SpeakContext speak() {
		SpeakContext _localctx = new SpeakContext(Context, State);
		EnterRule(_localctx, 12, RULE_speak);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(SPEAK);
			State = 66;
			Match(LEFTPARENTHESIS);
			State = 67;
			Match(ID);
			State = 68;
			Match(RIGHTPARENTHESIS);
			State = 69;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(RecipeLanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(RecipeLanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(RecipeLanguageParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRINGLIT() { return GetTokens(RecipeLanguageParser.STRINGLIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLIT(int i) {
			return GetToken(RecipeLanguageParser.STRINGLIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(RecipeLanguageParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(RecipeLanguageParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(RecipeLanguageParser.PLUS, i);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 14, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(ID);
			State = 72;
			Match(ASSIGN);
			State = 73;
			Match(STRINGLIT);
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS) {
				{
				State = 74;
				Match(PLUS);
				State = 75;
				Match(ID);
				State = 76;
				Match(PLUS);
				State = 77;
				Match(STRINGLIT);
				}
			}

			State = 80;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,20,83,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,1,0,1,0,1,0,1,0,1,0,1,0,1,1,4,1,24,8,1,11,1,12,1,25,1,1,1,1,1,1,1,
		1,3,1,32,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,42,8,2,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
		1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,79,8,7,1,7,
		1,7,1,7,0,0,8,0,2,4,6,8,10,12,14,0,0,82,0,16,1,0,0,0,2,31,1,0,0,0,4,41,
		1,0,0,0,6,43,1,0,0,0,8,53,1,0,0,0,10,59,1,0,0,0,12,65,1,0,0,0,14,71,1,
		0,0,0,16,17,5,1,0,0,17,18,5,2,0,0,18,19,5,3,0,0,19,20,3,2,1,0,20,21,5,
		19,0,0,21,1,1,0,0,0,22,24,3,4,2,0,23,22,1,0,0,0,24,25,1,0,0,0,25,23,1,
		0,0,0,25,26,1,0,0,0,26,32,1,0,0,0,27,28,5,3,0,0,28,29,3,2,1,0,29,30,5,
		19,0,0,30,32,1,0,0,0,31,23,1,0,0,0,31,27,1,0,0,0,32,3,1,0,0,0,33,42,3,
		6,3,0,34,42,3,8,4,0,35,42,3,10,5,0,36,42,3,12,6,0,37,42,3,14,7,0,38,39,
		5,17,0,0,39,40,5,18,0,0,40,42,5,11,0,0,41,33,1,0,0,0,41,34,1,0,0,0,41,
		35,1,0,0,0,41,36,1,0,0,0,41,37,1,0,0,0,41,38,1,0,0,0,42,5,1,0,0,0,43,44,
		5,4,0,0,44,45,5,2,0,0,45,46,5,5,0,0,46,47,5,6,0,0,47,48,5,7,0,0,48,49,
		5,8,0,0,49,50,5,3,0,0,50,51,3,2,1,0,51,52,5,19,0,0,52,7,1,0,0,0,53,54,
		5,9,0,0,54,55,5,2,0,0,55,56,5,7,0,0,56,57,5,10,0,0,57,58,5,11,0,0,58,9,
		1,0,0,0,59,60,5,12,0,0,60,61,5,5,0,0,61,62,5,2,0,0,62,63,5,6,0,0,63,64,
		5,11,0,0,64,11,1,0,0,0,65,66,5,16,0,0,66,67,5,5,0,0,67,68,5,2,0,0,68,69,
		5,6,0,0,69,70,5,11,0,0,70,13,1,0,0,0,71,72,5,2,0,0,72,73,5,13,0,0,73,78,
		5,14,0,0,74,75,5,15,0,0,75,76,5,2,0,0,76,77,5,15,0,0,77,79,5,14,0,0,78,
		74,1,0,0,0,78,79,1,0,0,0,79,80,1,0,0,0,80,81,5,11,0,0,81,15,1,0,0,0,4,
		25,31,41,78
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
