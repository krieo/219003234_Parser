//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from RecipeLanguage.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class RecipeLanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		RECIPE=1, DO=2, METHOD=3, ID=4, LEFTPARENTHESIS=5, RIGHTPARENTHESIS=6, 
		AS=7, INTEGER=8, INGREDIENT=9, STRING=10, SEMICOLON=11, ASK=12, ASSIGN=13, 
		STRINGLIT=14, PLUS=15, SPEAK=16, SHARE=17, INTEGERLIT=18, DONE=19;
	public const int
		RULE_recipe = 0, RULE_method = 1, RULE_ingredient = 2, RULE_statement = 3;
	public static readonly string[] ruleNames = {
		"recipe", "method", "ingredient", "statement"
	};

	private static readonly string[] _LiteralNames = {
		null, "'RECIPE'", "'DO'", "'METHOD'", null, "'('", "')'", "'AS'", "'INTEGER'", 
		"'INGREDIENT'", "'STRING'", "';'", "'ASK'", "'ASSIGN'", null, "'+'", "'SPEAK'", 
		"'SHARE'", null, "'DONE'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "RECIPE", "DO", "METHOD", "ID", "LEFTPARENTHESIS", "RIGHTPARENTHESIS", 
		"AS", "INTEGER", "INGREDIENT", "STRING", "SEMICOLON", "ASK", "ASSIGN", 
		"STRINGLIT", "PLUS", "SPEAK", "SHARE", "INTEGERLIT", "DONE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RecipeLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RecipeLanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RecipeLanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RecipeLanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RecipeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECIPE() { return GetToken(RecipeLanguageParser.RECIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RecipeLanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DO() { return GetTokens(RecipeLanguageParser.DO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO(int i) {
			return GetToken(RecipeLanguageParser.DO, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DONE() { return GetTokens(RecipeLanguageParser.DONE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DONE(int i) {
			return GetToken(RecipeLanguageParser.DONE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IngredientContext[] ingredient() {
			return GetRuleContexts<IngredientContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IngredientContext ingredient(int i) {
			return GetRuleContext<IngredientContext>(i);
		}
		public RecipeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recipe; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.EnterRecipe(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.ExitRecipe(this);
		}
	}

	[RuleVersion(0)]
	public RecipeContext recipe() {
		RecipeContext _localctx = new RecipeContext(Context, State);
		EnterRule(_localctx, 0, RULE_recipe);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8;
			Match(RECIPE);
			State = 9;
			Match(ID);
			State = 10;
			Match(DO);
			State = 11;
			method();
			State = 12;
			Match(DO);
			State = 16;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INGREDIENT) {
				{
				{
				State = 13;
				ingredient();
				}
				}
				State = 18;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 19;
			Match(DONE);
			State = 20;
			Match(DONE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(RecipeLanguageParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RecipeLanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPARENTHESIS() { return GetToken(RecipeLanguageParser.LEFTPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPARENTHESIS() { return GetToken(RecipeLanguageParser.RIGHTPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(RecipeLanguageParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(RecipeLanguageParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(RecipeLanguageParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DONE() { return GetToken(RecipeLanguageParser.DONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 2, RULE_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			Match(METHOD);
			State = 23;
			Match(ID);
			State = 24;
			Match(LEFTPARENTHESIS);
			State = 25;
			Match(RIGHTPARENTHESIS);
			State = 26;
			Match(AS);
			State = 27;
			Match(INTEGER);
			State = 28;
			Match(DO);
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 200720L) != 0)) {
				{
				{
				State = 29;
				statement();
				}
				}
				State = 34;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 35;
			Match(DONE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IngredientContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INGREDIENT() { return GetToken(RecipeLanguageParser.INGREDIENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RecipeLanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(RecipeLanguageParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RecipeLanguageParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(RecipeLanguageParser.SEMICOLON, 0); }
		public IngredientContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ingredient; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.EnterIngredient(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.ExitIngredient(this);
		}
	}

	[RuleVersion(0)]
	public IngredientContext ingredient() {
		IngredientContext _localctx = new IngredientContext(Context, State);
		EnterRule(_localctx, 4, RULE_ingredient);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			Match(INGREDIENT);
			State = 38;
			Match(ID);
			State = 39;
			Match(AS);
			State = 40;
			Match(STRING);
			State = 41;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(RecipeLanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(RecipeLanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(RecipeLanguageParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRINGLIT() { return GetTokens(RecipeLanguageParser.STRINGLIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLIT(int i) {
			return GetToken(RecipeLanguageParser.STRINGLIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(RecipeLanguageParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(RecipeLanguageParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(RecipeLanguageParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPEAK() { return GetToken(RecipeLanguageParser.SPEAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPARENTHESIS() { return GetToken(RecipeLanguageParser.LEFTPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPARENTHESIS() { return GetToken(RecipeLanguageParser.RIGHTPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(RecipeLanguageParser.SHARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGERLIT() { return GetToken(RecipeLanguageParser.INTEGERLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASK() { return GetToken(RecipeLanguageParser.ASK, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 64;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 43;
				Match(ID);
				State = 44;
				Match(ASSIGN);
				State = 45;
				Match(STRINGLIT);
				State = 46;
				Match(PLUS);
				State = 47;
				Match(ID);
				State = 48;
				Match(PLUS);
				State = 49;
				Match(STRINGLIT);
				State = 50;
				Match(SEMICOLON);
				}
				break;
			case SPEAK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51;
				Match(SPEAK);
				State = 52;
				Match(LEFTPARENTHESIS);
				State = 53;
				Match(ID);
				State = 54;
				Match(RIGHTPARENTHESIS);
				State = 55;
				Match(SEMICOLON);
				}
				break;
			case SHARE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 56;
				Match(SHARE);
				State = 57;
				Match(INTEGERLIT);
				State = 58;
				Match(SEMICOLON);
				}
				break;
			case ASK:
				EnterOuterAlt(_localctx, 4);
				{
				State = 59;
				Match(ASK);
				State = 60;
				Match(LEFTPARENTHESIS);
				State = 61;
				Match(ID);
				State = 62;
				Match(RIGHTPARENTHESIS);
				State = 63;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,19,67,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,1,0,1,0,1,0,1,0,1,0,1,0,5,0,
		15,8,0,10,0,12,0,18,9,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,
		1,31,8,1,10,1,12,1,34,9,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,3,3,65,8,3,1,3,0,0,4,0,2,4,6,0,0,67,0,8,1,0,0,0,2,22,1,0,0,0,4,37,1,
		0,0,0,6,64,1,0,0,0,8,9,5,1,0,0,9,10,5,4,0,0,10,11,5,2,0,0,11,12,3,2,1,
		0,12,16,5,2,0,0,13,15,3,4,2,0,14,13,1,0,0,0,15,18,1,0,0,0,16,14,1,0,0,
		0,16,17,1,0,0,0,17,19,1,0,0,0,18,16,1,0,0,0,19,20,5,19,0,0,20,21,5,19,
		0,0,21,1,1,0,0,0,22,23,5,3,0,0,23,24,5,4,0,0,24,25,5,5,0,0,25,26,5,6,0,
		0,26,27,5,7,0,0,27,28,5,8,0,0,28,32,5,2,0,0,29,31,3,6,3,0,30,29,1,0,0,
		0,31,34,1,0,0,0,32,30,1,0,0,0,32,33,1,0,0,0,33,35,1,0,0,0,34,32,1,0,0,
		0,35,36,5,19,0,0,36,3,1,0,0,0,37,38,5,9,0,0,38,39,5,4,0,0,39,40,5,7,0,
		0,40,41,5,10,0,0,41,42,5,11,0,0,42,5,1,0,0,0,43,44,5,4,0,0,44,45,5,13,
		0,0,45,46,5,14,0,0,46,47,5,15,0,0,47,48,5,4,0,0,48,49,5,15,0,0,49,50,5,
		14,0,0,50,65,5,11,0,0,51,52,5,16,0,0,52,53,5,5,0,0,53,54,5,4,0,0,54,55,
		5,6,0,0,55,65,5,11,0,0,56,57,5,17,0,0,57,58,5,18,0,0,58,65,5,11,0,0,59,
		60,5,12,0,0,60,61,5,5,0,0,61,62,5,4,0,0,62,63,5,6,0,0,63,65,5,11,0,0,64,
		43,1,0,0,0,64,51,1,0,0,0,64,56,1,0,0,0,64,59,1,0,0,0,65,7,1,0,0,0,3,16,
		32,64
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
