//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from RecipeLanguage.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class RecipeLanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		RECIPE=1, METHOD=2, INTEGER=3, STRING=4, INGREDIENT=5, FLOAT=6, SPEAK=7, 
		SHARE=8, WHILE=9, DONE=10, LOOP=11, ELSE=12, ASK=13, AS=14, DO=15, IF=16, 
		PLUS=17, MINUS=18, FORWARD_SLASH=19, STAR=20, EQUAL=21, THEN=22, FUNCTION_CALL=23, 
		ASSIGN=24, GREATEREQUAL=25, NEQ=26, LESSEREQUAL=27, GREATER=28, LESSER=29, 
		SEMICOLON=30, LEFTPARENTHESIS=31, RIGHTPARENTHESIS=32, LEFTBRACKET=33, 
		RIGHTBRACKET=34, STRINGLIT=35, BOOL=36, AND=37, INTEGERLIT=38, FLOATLIT=39, 
		BOOLLITTRUE=40, BOOLLITFALSE=41, ARRAY=42, ID=43, METHOD_MAIN=44, STMNT_BLOCK=45, 
		STMNT=46, EXPR=47, TERM=48, FACTOR=49, ARRAY_ACCESS=50, ARGUMENT_LIST=51, 
		TYPE=52, WS=53;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_askStatement = 2, RULE_declaration = 3, 
		RULE_ingredientDeclaration = 4, RULE_arrayDeclaration = 5, RULE_speakStatement = 6, 
		RULE_shareStatement = 7, RULE_assignment = 8, RULE_recipeStatement = 9, 
		RULE_methodStatement = 10, RULE_functionCall = 11, RULE_loopStatement = 12, 
		RULE_conditionalStatement = 13, RULE_expression = 14;
	public static readonly string[] ruleNames = {
		"program", "statement", "askStatement", "declaration", "ingredientDeclaration", 
		"arrayDeclaration", "speakStatement", "shareStatement", "assignment", 
		"recipeStatement", "methodStatement", "functionCall", "loopStatement", 
		"conditionalStatement", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'RECIPE'", "'METHOD'", "'INTEGER'", "'STRING'", "'INGREDIENT'", 
		"'FLOAT'", "'SPEAK'", "'SHARE'", "'WHILE'", "'DONE'", "'LOOP'", "'ELSE'", 
		"'ASK'", "'AS'", "'DO'", "'IF'", "'PLUS'", "'MINUS'", "'FORWARD_SLASH'", 
		"'STAR'", "'EQUAL'", "'THEN'", "'FUNCTION_CALL'", "'ASSIGN'", "'GREATEREQUAL'", 
		"'NEQ'", "'LESSEREQUAL'", "'GREATER'", "'LESSER'", "'SEMICOLON'", "'LEFTPARENTHESIS'", 
		"'RIGHTPARENTHESIS'", "'LEFTBRACKET'", "'RIGHTBRACKET'", "'STRINGLIT'", 
		"'BOOL'", "'AND'", "'INTEGERLIT'", "'FLOATLIT'", "'BOOLLITTRUE'", "'BOOLLITFALSE'", 
		"'ARRAY'", "'ID'", "'METHOD_MAIN'", "'STMNT_BLOCK'", "'STMNT'", "'EXPR'", 
		"'TERM'", "'FACTOR'", "'ARRAY_ACCESS'", "'ARGUMENT_LIST'", "'TYPE'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "RECIPE", "METHOD", "INTEGER", "STRING", "INGREDIENT", "FLOAT", 
		"SPEAK", "SHARE", "WHILE", "DONE", "LOOP", "ELSE", "ASK", "AS", "DO", 
		"IF", "PLUS", "MINUS", "FORWARD_SLASH", "STAR", "EQUAL", "THEN", "FUNCTION_CALL", 
		"ASSIGN", "GREATEREQUAL", "NEQ", "LESSEREQUAL", "GREATER", "LESSER", "SEMICOLON", 
		"LEFTPARENTHESIS", "RIGHTPARENTHESIS", "LEFTBRACKET", "RIGHTBRACKET", 
		"STRINGLIT", "BOOL", "AND", "INTEGERLIT", "FLOATLIT", "BOOLLITTRUE", "BOOLLITFALSE", 
		"ARRAY", "ID", "METHOD_MAIN", "STMNT_BLOCK", "STMNT", "EXPR", "TERM", 
		"FACTOR", "ARRAY_ACCESS", "ARGUMENT_LIST", "TYPE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RecipeLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RecipeLanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RecipeLanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RecipeLanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 30;
				statement();
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AskStatementContext askStatement() {
			return GetRuleContext<AskStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpeakStatementContext speakStatement() {
			return GetRuleContext<SpeakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShareStatementContext shareStatement() {
			return GetRuleContext<ShareStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecipeStatementContext recipeStatement() {
			return GetRuleContext<RecipeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodStatementContext methodStatement() {
			return GetRuleContext<MethodStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalStatementContext conditionalStatement() {
			return GetRuleContext<ConditionalStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 45;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 35;
				askStatement();
				}
				break;
			case INGREDIENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 36;
				declaration();
				}
				break;
			case SPEAK:
				EnterOuterAlt(_localctx, 3);
				{
				State = 37;
				speakStatement();
				}
				break;
			case SHARE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 38;
				shareStatement();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 5);
				{
				State = 39;
				assignment();
				}
				break;
			case RECIPE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 40;
				recipeStatement();
				}
				break;
			case METHOD:
				EnterOuterAlt(_localctx, 7);
				{
				State = 41;
				methodStatement();
				}
				break;
			case FUNCTION_CALL:
				EnterOuterAlt(_localctx, 8);
				{
				State = 42;
				functionCall();
				}
				break;
			case LOOP:
				EnterOuterAlt(_localctx, 9);
				{
				State = 43;
				loopStatement();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 10);
				{
				State = 44;
				conditionalStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AskStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASK() { return GetToken(RecipeLanguageParser.ASK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPARENTHESIS() { return GetToken(RecipeLanguageParser.LEFTPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RecipeLanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPARENTHESIS() { return GetToken(RecipeLanguageParser.RIGHTPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(RecipeLanguageParser.SEMICOLON, 0); }
		public AskStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_askStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.EnterAskStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.ExitAskStatement(this);
		}
	}

	[RuleVersion(0)]
	public AskStatementContext askStatement() {
		AskStatementContext _localctx = new AskStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_askStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			Match(ASK);
			State = 48;
			Match(LEFTPARENTHESIS);
			State = 49;
			Match(ID);
			State = 50;
			Match(RIGHTPARENTHESIS);
			State = 51;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IngredientDeclarationContext ingredientDeclaration() {
			return GetRuleContext<IngredientDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclarationContext arrayDeclaration() {
			return GetRuleContext<ArrayDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_declaration);
		try {
			State = 55;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 53;
				ingredientDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 54;
				arrayDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IngredientDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INGREDIENT() { return GetToken(RecipeLanguageParser.INGREDIENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RecipeLanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(RecipeLanguageParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RecipeLanguageParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(RecipeLanguageParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(RecipeLanguageParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(RecipeLanguageParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(RecipeLanguageParser.FLOAT, 0); }
		public IngredientDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ingredientDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.EnterIngredientDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.ExitIngredientDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public IngredientDeclarationContext ingredientDeclaration() {
		IngredientDeclarationContext _localctx = new IngredientDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_ingredientDeclaration);
		try {
			State = 77;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 57;
				Match(INGREDIENT);
				State = 58;
				Match(ID);
				State = 59;
				Match(AS);
				State = 60;
				Match(STRING);
				State = 61;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 62;
				Match(INGREDIENT);
				State = 63;
				Match(ID);
				State = 64;
				Match(AS);
				State = 65;
				Match(INTEGER);
				State = 66;
				Match(SEMICOLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 67;
				Match(INGREDIENT);
				State = 68;
				Match(ID);
				State = 69;
				Match(AS);
				State = 70;
				Match(BOOL);
				State = 71;
				Match(SEMICOLON);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 72;
				Match(INGREDIENT);
				State = 73;
				Match(ID);
				State = 74;
				Match(AS);
				State = 75;
				Match(FLOAT);
				State = 76;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INGREDIENT() { return GetToken(RecipeLanguageParser.INGREDIENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RecipeLanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTBRACKET() { return GetToken(RecipeLanguageParser.LEFTBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTBRACKET() { return GetToken(RecipeLanguageParser.RIGHTBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(RecipeLanguageParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RecipeLanguageParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(RecipeLanguageParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(RecipeLanguageParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(RecipeLanguageParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(RecipeLanguageParser.FLOAT, 0); }
		public ArrayDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.EnterArrayDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.ExitArrayDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclarationContext arrayDeclaration() {
		ArrayDeclarationContext _localctx = new ArrayDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_arrayDeclaration);
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 79;
				Match(INGREDIENT);
				State = 80;
				Match(ID);
				State = 81;
				Match(LEFTBRACKET);
				State = 82;
				Match(RIGHTBRACKET);
				State = 83;
				Match(AS);
				State = 84;
				Match(STRING);
				State = 85;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 86;
				Match(INGREDIENT);
				State = 87;
				Match(ID);
				State = 88;
				Match(LEFTBRACKET);
				State = 89;
				Match(RIGHTBRACKET);
				State = 90;
				Match(AS);
				State = 91;
				Match(INTEGER);
				State = 92;
				Match(SEMICOLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 93;
				Match(INGREDIENT);
				State = 94;
				Match(ID);
				State = 95;
				Match(LEFTBRACKET);
				State = 96;
				Match(RIGHTBRACKET);
				State = 97;
				Match(AS);
				State = 98;
				Match(BOOL);
				State = 99;
				Match(SEMICOLON);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 100;
				Match(INGREDIENT);
				State = 101;
				Match(ID);
				State = 102;
				Match(LEFTBRACKET);
				State = 103;
				Match(RIGHTBRACKET);
				State = 104;
				Match(AS);
				State = 105;
				Match(FLOAT);
				State = 106;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpeakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPEAK() { return GetToken(RecipeLanguageParser.SPEAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPARENTHESIS() { return GetToken(RecipeLanguageParser.LEFTPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLIT() { return GetToken(RecipeLanguageParser.STRINGLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPARENTHESIS() { return GetToken(RecipeLanguageParser.RIGHTPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(RecipeLanguageParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGERLIT() { return GetToken(RecipeLanguageParser.INTEGERLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATLIT() { return GetToken(RecipeLanguageParser.FLOATLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLLITTRUE() { return GetToken(RecipeLanguageParser.BOOLLITTRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLLITFALSE() { return GetToken(RecipeLanguageParser.BOOLLITFALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RecipeLanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(RecipeLanguageParser.PLUS, 0); }
		public SpeakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_speakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.EnterSpeakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.ExitSpeakStatement(this);
		}
	}

	[RuleVersion(0)]
	public SpeakStatementContext speakStatement() {
		SpeakStatementContext _localctx = new SpeakStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_speakStatement);
		try {
			State = 146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 109;
				Match(SPEAK);
				State = 110;
				Match(LEFTPARENTHESIS);
				State = 111;
				Match(STRINGLIT);
				State = 112;
				Match(RIGHTPARENTHESIS);
				State = 113;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 114;
				Match(SPEAK);
				State = 115;
				Match(LEFTPARENTHESIS);
				State = 116;
				Match(INTEGERLIT);
				State = 117;
				Match(RIGHTPARENTHESIS);
				State = 118;
				Match(SEMICOLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 119;
				Match(SPEAK);
				State = 120;
				Match(LEFTPARENTHESIS);
				State = 121;
				Match(FLOATLIT);
				State = 122;
				Match(RIGHTPARENTHESIS);
				State = 123;
				Match(SEMICOLON);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 124;
				Match(SPEAK);
				State = 125;
				Match(LEFTPARENTHESIS);
				State = 126;
				Match(BOOLLITTRUE);
				State = 127;
				Match(RIGHTPARENTHESIS);
				State = 128;
				Match(SEMICOLON);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 129;
				Match(SPEAK);
				State = 130;
				Match(LEFTPARENTHESIS);
				State = 131;
				Match(BOOLLITFALSE);
				State = 132;
				Match(RIGHTPARENTHESIS);
				State = 133;
				Match(SEMICOLON);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 134;
				Match(SPEAK);
				State = 135;
				Match(LEFTPARENTHESIS);
				State = 136;
				Match(ID);
				State = 137;
				Match(RIGHTPARENTHESIS);
				State = 138;
				Match(SEMICOLON);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 139;
				Match(SPEAK);
				State = 140;
				Match(LEFTPARENTHESIS);
				State = 141;
				Match(STRINGLIT);
				State = 142;
				Match(PLUS);
				State = 143;
				Match(ID);
				State = 144;
				Match(RIGHTPARENTHESIS);
				State = 145;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShareStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(RecipeLanguageParser.SHARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGERLIT() { return GetToken(RecipeLanguageParser.INTEGERLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(RecipeLanguageParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLIT() { return GetToken(RecipeLanguageParser.STRINGLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATLIT() { return GetToken(RecipeLanguageParser.FLOATLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLLITTRUE() { return GetToken(RecipeLanguageParser.BOOLLITTRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLLITFALSE() { return GetToken(RecipeLanguageParser.BOOLLITFALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(RecipeLanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(RecipeLanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(RecipeLanguageParser.PLUS, 0); }
		public ShareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shareStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.EnterShareStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.ExitShareStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShareStatementContext shareStatement() {
		ShareStatementContext _localctx = new ShareStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_shareStatement);
		try {
			State = 171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 148;
				Match(SHARE);
				State = 149;
				Match(INTEGERLIT);
				State = 150;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 151;
				Match(SHARE);
				State = 152;
				Match(STRINGLIT);
				State = 153;
				Match(SEMICOLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 154;
				Match(SHARE);
				State = 155;
				Match(FLOATLIT);
				State = 156;
				Match(SEMICOLON);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 157;
				Match(SHARE);
				State = 158;
				Match(BOOLLITTRUE);
				State = 159;
				Match(SEMICOLON);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 160;
				Match(SHARE);
				State = 161;
				Match(BOOLLITFALSE);
				State = 162;
				Match(SEMICOLON);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 163;
				Match(SHARE);
				State = 164;
				Match(ID);
				State = 165;
				Match(SEMICOLON);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 166;
				Match(SHARE);
				State = 167;
				Match(ID);
				State = 168;
				Match(PLUS);
				State = 169;
				Match(ID);
				State = 170;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(RecipeLanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(RecipeLanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(RecipeLanguageParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTEGERLIT() { return GetTokens(RecipeLanguageParser.INTEGERLIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGERLIT(int i) {
			return GetToken(RecipeLanguageParser.INTEGERLIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(RecipeLanguageParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATLIT() { return GetToken(RecipeLanguageParser.FLOATLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRINGLIT() { return GetTokens(RecipeLanguageParser.STRINGLIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLIT(int i) {
			return GetToken(RecipeLanguageParser.STRINGLIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLLITTRUE() { return GetToken(RecipeLanguageParser.BOOLLITTRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLLITFALSE() { return GetToken(RecipeLanguageParser.BOOLLITFALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(RecipeLanguageParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(RecipeLanguageParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_CALL() { return GetToken(RecipeLanguageParser.FUNCTION_CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPARENTHESIS() { return GetToken(RecipeLanguageParser.LEFTPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPARENTHESIS() { return GetToken(RecipeLanguageParser.RIGHTPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(RecipeLanguageParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(RecipeLanguageParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD_SLASH() { return GetToken(RecipeLanguageParser.FORWARD_SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTBRACKET() { return GetToken(RecipeLanguageParser.LEFTBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTBRACKET() { return GetToken(RecipeLanguageParser.RIGHTBRACKET, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 16, RULE_assignment);
		try {
			State = 281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 173;
				Match(ID);
				State = 174;
				Match(ASSIGN);
				State = 175;
				Match(INTEGERLIT);
				State = 176;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 177;
				Match(ID);
				State = 178;
				Match(ASSIGN);
				State = 179;
				Match(FLOATLIT);
				State = 180;
				Match(SEMICOLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 181;
				Match(ID);
				State = 182;
				Match(ASSIGN);
				State = 183;
				Match(STRINGLIT);
				State = 184;
				Match(SEMICOLON);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 185;
				Match(ID);
				State = 186;
				Match(ASSIGN);
				State = 187;
				Match(BOOLLITTRUE);
				State = 188;
				Match(SEMICOLON);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 189;
				Match(ID);
				State = 190;
				Match(ASSIGN);
				State = 191;
				Match(BOOLLITFALSE);
				State = 192;
				Match(SEMICOLON);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 193;
				Match(ID);
				State = 194;
				Match(ASSIGN);
				State = 195;
				Match(ID);
				State = 196;
				Match(PLUS);
				State = 197;
				Match(INTEGERLIT);
				State = 198;
				Match(SEMICOLON);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 199;
				Match(ID);
				State = 200;
				Match(ASSIGN);
				State = 201;
				Match(ID);
				State = 202;
				Match(PLUS);
				State = 203;
				Match(FLOATLIT);
				State = 204;
				Match(SEMICOLON);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 205;
				Match(ID);
				State = 206;
				Match(ASSIGN);
				State = 207;
				Match(ID);
				State = 208;
				Match(PLUS);
				State = 209;
				Match(STRINGLIT);
				State = 210;
				Match(SEMICOLON);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 211;
				Match(ID);
				State = 212;
				Match(ASSIGN);
				State = 213;
				Match(FUNCTION_CALL);
				State = 214;
				Match(ID);
				State = 215;
				Match(LEFTPARENTHESIS);
				State = 216;
				Match(ID);
				State = 217;
				Match(ID);
				State = 218;
				Match(RIGHTPARENTHESIS);
				State = 219;
				Match(SEMICOLON);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 220;
				Match(ID);
				State = 221;
				Match(ASSIGN);
				State = 222;
				Match(FUNCTION_CALL);
				State = 223;
				Match(ID);
				State = 224;
				Match(LEFTPARENTHESIS);
				State = 225;
				Match(ID);
				State = 226;
				Match(RIGHTPARENTHESIS);
				State = 227;
				Match(SEMICOLON);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 228;
				Match(ID);
				State = 229;
				Match(ASSIGN);
				State = 230;
				Match(ID);
				State = 231;
				Match(PLUS);
				State = 232;
				Match(ID);
				State = 233;
				Match(SEMICOLON);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 234;
				Match(ID);
				State = 235;
				Match(ASSIGN);
				State = 236;
				Match(ID);
				State = 237;
				Match(MINUS);
				State = 238;
				Match(ID);
				State = 239;
				Match(SEMICOLON);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 240;
				Match(ID);
				State = 241;
				Match(ASSIGN);
				State = 242;
				Match(ID);
				State = 243;
				Match(STAR);
				State = 244;
				Match(ID);
				State = 245;
				Match(SEMICOLON);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 246;
				Match(ID);
				State = 247;
				Match(ASSIGN);
				State = 248;
				Match(ID);
				State = 249;
				Match(FORWARD_SLASH);
				State = 250;
				Match(ID);
				State = 251;
				Match(SEMICOLON);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 252;
				Match(ID);
				State = 253;
				Match(ASSIGN);
				State = 254;
				Match(STRINGLIT);
				State = 255;
				Match(PLUS);
				State = 256;
				Match(ID);
				State = 257;
				Match(PLUS);
				State = 258;
				Match(STRINGLIT);
				State = 259;
				Match(SEMICOLON);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 260;
				Match(ID);
				State = 261;
				Match(LEFTBRACKET);
				State = 262;
				Match(INTEGERLIT);
				State = 263;
				Match(RIGHTBRACKET);
				State = 264;
				Match(ASSIGN);
				State = 265;
				Match(STRINGLIT);
				State = 266;
				Match(SEMICOLON);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 267;
				Match(ID);
				State = 268;
				Match(LEFTBRACKET);
				State = 269;
				Match(INTEGERLIT);
				State = 270;
				Match(RIGHTBRACKET);
				State = 271;
				Match(ASSIGN);
				State = 272;
				Match(FLOATLIT);
				State = 273;
				Match(SEMICOLON);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 274;
				Match(ID);
				State = 275;
				Match(LEFTBRACKET);
				State = 276;
				Match(INTEGERLIT);
				State = 277;
				Match(RIGHTBRACKET);
				State = 278;
				Match(ASSIGN);
				State = 279;
				Match(INTEGERLIT);
				State = 280;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecipeStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECIPE() { return GetToken(RecipeLanguageParser.RECIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RecipeLanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(RecipeLanguageParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DONE() { return GetToken(RecipeLanguageParser.DONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public RecipeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recipeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.EnterRecipeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.ExitRecipeStatement(this);
		}
	}

	[RuleVersion(0)]
	public RecipeStatementContext recipeStatement() {
		RecipeStatementContext _localctx = new RecipeStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_recipeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(RECIPE);
			State = 284;
			Match(ID);
			State = 285;
			Match(DO);
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 286;
				statement();
				}
				}
				State = 289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
			State = 291;
			Match(DONE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(RecipeLanguageParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(RecipeLanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(RecipeLanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPARENTHESIS() { return GetToken(RecipeLanguageParser.LEFTPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPARENTHESIS() { return GetToken(RecipeLanguageParser.RIGHTPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AS() { return GetTokens(RecipeLanguageParser.AS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS(int i) {
			return GetToken(RecipeLanguageParser.AS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTEGER() { return GetTokens(RecipeLanguageParser.INTEGER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER(int i) {
			return GetToken(RecipeLanguageParser.INTEGER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(RecipeLanguageParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DONE() { return GetToken(RecipeLanguageParser.DONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(RecipeLanguageParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(RecipeLanguageParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLOAT() { return GetTokens(RecipeLanguageParser.FLOAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT(int i) {
			return GetToken(RecipeLanguageParser.FLOAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BOOL() { return GetTokens(RecipeLanguageParser.BOOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL(int i) {
			return GetToken(RecipeLanguageParser.BOOL, i);
		}
		public MethodStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.EnterMethodStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.ExitMethodStatement(this);
		}
	}

	[RuleVersion(0)]
	public MethodStatementContext methodStatement() {
		MethodStatementContext _localctx = new MethodStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_methodStatement);
		int _la;
		try {
			State = 701;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 293;
				Match(METHOD);
				State = 294;
				Match(ID);
				State = 295;
				Match(LEFTPARENTHESIS);
				State = 296;
				Match(RIGHTPARENTHESIS);
				State = 297;
				Match(AS);
				State = 298;
				Match(INTEGER);
				State = 299;
				Match(DO);
				State = 301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 300;
					statement();
					}
					}
					State = 303;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
				State = 305;
				Match(DONE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 307;
				Match(METHOD);
				State = 308;
				Match(ID);
				State = 309;
				Match(LEFTPARENTHESIS);
				State = 310;
				Match(RIGHTPARENTHESIS);
				State = 311;
				Match(AS);
				State = 312;
				Match(STRING);
				State = 313;
				Match(DO);
				State = 315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 314;
					statement();
					}
					}
					State = 317;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
				State = 319;
				Match(DONE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 321;
				Match(METHOD);
				State = 322;
				Match(ID);
				State = 323;
				Match(LEFTPARENTHESIS);
				State = 324;
				Match(RIGHTPARENTHESIS);
				State = 325;
				Match(AS);
				State = 326;
				Match(FLOAT);
				State = 327;
				Match(DO);
				State = 329;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 328;
					statement();
					}
					}
					State = 331;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
				State = 333;
				Match(DONE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 335;
				Match(METHOD);
				State = 336;
				Match(ID);
				State = 337;
				Match(LEFTPARENTHESIS);
				State = 338;
				Match(RIGHTPARENTHESIS);
				State = 339;
				Match(AS);
				State = 340;
				Match(BOOL);
				State = 341;
				Match(DO);
				State = 343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 342;
					statement();
					}
					}
					State = 345;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
				State = 347;
				Match(DONE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 349;
				Match(METHOD);
				State = 350;
				Match(ID);
				State = 351;
				Match(LEFTPARENTHESIS);
				State = 352;
				Match(ID);
				State = 353;
				Match(AS);
				State = 354;
				Match(STRING);
				State = 355;
				Match(RIGHTPARENTHESIS);
				State = 356;
				Match(AS);
				State = 357;
				Match(INTEGER);
				State = 358;
				Match(DO);
				State = 360;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 359;
					statement();
					}
					}
					State = 362;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
				State = 364;
				Match(DONE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 366;
				Match(METHOD);
				State = 367;
				Match(ID);
				State = 368;
				Match(LEFTPARENTHESIS);
				State = 369;
				Match(ID);
				State = 370;
				Match(AS);
				State = 371;
				Match(FLOAT);
				State = 372;
				Match(RIGHTPARENTHESIS);
				State = 373;
				Match(AS);
				State = 374;
				Match(INTEGER);
				State = 375;
				Match(DO);
				State = 377;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 376;
					statement();
					}
					}
					State = 379;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
				State = 381;
				Match(DONE);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 383;
				Match(METHOD);
				State = 384;
				Match(ID);
				State = 385;
				Match(LEFTPARENTHESIS);
				State = 386;
				Match(ID);
				State = 387;
				Match(AS);
				State = 388;
				Match(INTEGER);
				State = 389;
				Match(RIGHTPARENTHESIS);
				State = 390;
				Match(AS);
				State = 391;
				Match(INTEGER);
				State = 392;
				Match(DO);
				State = 394;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 393;
					statement();
					}
					}
					State = 396;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
				State = 398;
				Match(DONE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 400;
				Match(METHOD);
				State = 401;
				Match(ID);
				State = 402;
				Match(LEFTPARENTHESIS);
				State = 403;
				Match(ID);
				State = 404;
				Match(AS);
				State = 405;
				Match(BOOL);
				State = 406;
				Match(RIGHTPARENTHESIS);
				State = 407;
				Match(AS);
				State = 408;
				Match(INTEGER);
				State = 409;
				Match(DO);
				State = 411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 410;
					statement();
					}
					}
					State = 413;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
				State = 415;
				Match(DONE);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 417;
				Match(METHOD);
				State = 418;
				Match(ID);
				State = 419;
				Match(LEFTPARENTHESIS);
				State = 420;
				Match(ID);
				State = 421;
				Match(AS);
				State = 422;
				Match(STRING);
				State = 423;
				Match(RIGHTPARENTHESIS);
				State = 424;
				Match(AS);
				State = 425;
				Match(STRING);
				State = 426;
				Match(DO);
				State = 428;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 427;
					statement();
					}
					}
					State = 430;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
				State = 432;
				Match(DONE);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 434;
				Match(METHOD);
				State = 435;
				Match(ID);
				State = 436;
				Match(LEFTPARENTHESIS);
				State = 437;
				Match(ID);
				State = 438;
				Match(AS);
				State = 439;
				Match(FLOAT);
				State = 440;
				Match(RIGHTPARENTHESIS);
				State = 441;
				Match(AS);
				State = 442;
				Match(STRING);
				State = 443;
				Match(DO);
				State = 445;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 444;
					statement();
					}
					}
					State = 447;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
				State = 449;
				Match(DONE);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 451;
				Match(METHOD);
				State = 452;
				Match(ID);
				State = 453;
				Match(LEFTPARENTHESIS);
				State = 454;
				Match(ID);
				State = 455;
				Match(AS);
				State = 456;
				Match(INTEGER);
				State = 457;
				Match(RIGHTPARENTHESIS);
				State = 458;
				Match(AS);
				State = 459;
				Match(STRING);
				State = 460;
				Match(DO);
				State = 462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 461;
					statement();
					}
					}
					State = 464;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
				State = 466;
				Match(DONE);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 468;
				Match(METHOD);
				State = 469;
				Match(ID);
				State = 470;
				Match(LEFTPARENTHESIS);
				State = 471;
				Match(ID);
				State = 472;
				Match(AS);
				State = 473;
				Match(BOOL);
				State = 474;
				Match(RIGHTPARENTHESIS);
				State = 475;
				Match(AS);
				State = 476;
				Match(STRING);
				State = 477;
				Match(DO);
				State = 479;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 478;
					statement();
					}
					}
					State = 481;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
				State = 483;
				Match(DONE);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 485;
				Match(METHOD);
				State = 486;
				Match(ID);
				State = 487;
				Match(LEFTPARENTHESIS);
				State = 488;
				Match(ID);
				State = 489;
				Match(AS);
				State = 490;
				Match(STRING);
				State = 491;
				Match(RIGHTPARENTHESIS);
				State = 492;
				Match(AS);
				State = 493;
				Match(FLOAT);
				State = 494;
				Match(DO);
				State = 496;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 495;
					statement();
					}
					}
					State = 498;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
				State = 500;
				Match(DONE);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 502;
				Match(METHOD);
				State = 503;
				Match(ID);
				State = 504;
				Match(LEFTPARENTHESIS);
				State = 505;
				Match(ID);
				State = 506;
				Match(AS);
				State = 507;
				Match(FLOAT);
				State = 508;
				Match(RIGHTPARENTHESIS);
				State = 509;
				Match(AS);
				State = 510;
				Match(FLOAT);
				State = 511;
				Match(DO);
				State = 513;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 512;
					statement();
					}
					}
					State = 515;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
				State = 517;
				Match(DONE);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 519;
				Match(METHOD);
				State = 520;
				Match(ID);
				State = 521;
				Match(LEFTPARENTHESIS);
				State = 522;
				Match(ID);
				State = 523;
				Match(AS);
				State = 524;
				Match(INTEGER);
				State = 525;
				Match(RIGHTPARENTHESIS);
				State = 526;
				Match(AS);
				State = 527;
				Match(FLOAT);
				State = 528;
				Match(DO);
				State = 530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 529;
					statement();
					}
					}
					State = 532;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
				State = 534;
				Match(DONE);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 536;
				Match(METHOD);
				State = 537;
				Match(ID);
				State = 538;
				Match(LEFTPARENTHESIS);
				State = 539;
				Match(ID);
				State = 540;
				Match(AS);
				State = 541;
				Match(BOOL);
				State = 542;
				Match(RIGHTPARENTHESIS);
				State = 543;
				Match(AS);
				State = 544;
				Match(FLOAT);
				State = 545;
				Match(DO);
				State = 547;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 546;
					statement();
					}
					}
					State = 549;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
				State = 551;
				Match(DONE);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 553;
				Match(METHOD);
				State = 554;
				Match(ID);
				State = 555;
				Match(LEFTPARENTHESIS);
				State = 556;
				Match(ID);
				State = 557;
				Match(AS);
				State = 558;
				Match(STRING);
				State = 559;
				Match(RIGHTPARENTHESIS);
				State = 560;
				Match(AS);
				State = 561;
				Match(BOOL);
				State = 562;
				Match(DO);
				State = 564;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 563;
					statement();
					}
					}
					State = 566;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
				State = 568;
				Match(DONE);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 570;
				Match(METHOD);
				State = 571;
				Match(ID);
				State = 572;
				Match(LEFTPARENTHESIS);
				State = 573;
				Match(ID);
				State = 574;
				Match(AS);
				State = 575;
				Match(FLOAT);
				State = 576;
				Match(RIGHTPARENTHESIS);
				State = 577;
				Match(AS);
				State = 578;
				Match(BOOL);
				State = 579;
				Match(DO);
				State = 581;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 580;
					statement();
					}
					}
					State = 583;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
				State = 585;
				Match(DONE);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 587;
				Match(METHOD);
				State = 588;
				Match(ID);
				State = 589;
				Match(LEFTPARENTHESIS);
				State = 590;
				Match(ID);
				State = 591;
				Match(AS);
				State = 592;
				Match(INTEGER);
				State = 593;
				Match(RIGHTPARENTHESIS);
				State = 594;
				Match(AS);
				State = 595;
				Match(BOOL);
				State = 596;
				Match(DO);
				State = 598;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 597;
					statement();
					}
					}
					State = 600;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
				State = 602;
				Match(DONE);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 604;
				Match(METHOD);
				State = 605;
				Match(ID);
				State = 606;
				Match(LEFTPARENTHESIS);
				State = 607;
				Match(ID);
				State = 608;
				Match(AS);
				State = 609;
				Match(BOOL);
				State = 610;
				Match(RIGHTPARENTHESIS);
				State = 611;
				Match(AS);
				State = 612;
				Match(BOOL);
				State = 613;
				Match(DO);
				State = 615;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 614;
					statement();
					}
					}
					State = 617;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
				State = 619;
				Match(DONE);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 621;
				Match(METHOD);
				State = 622;
				Match(ID);
				State = 623;
				Match(LEFTPARENTHESIS);
				State = 624;
				Match(ID);
				State = 625;
				Match(AS);
				State = 626;
				Match(INTEGER);
				State = 627;
				Match(ID);
				State = 628;
				Match(AS);
				State = 629;
				Match(INTEGER);
				State = 630;
				Match(RIGHTPARENTHESIS);
				State = 631;
				Match(AS);
				State = 632;
				Match(INTEGER);
				State = 633;
				Match(DO);
				State = 635;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 634;
					statement();
					}
					}
					State = 637;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
				State = 639;
				Match(DONE);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 641;
				Match(METHOD);
				State = 642;
				Match(ID);
				State = 643;
				Match(LEFTPARENTHESIS);
				State = 644;
				Match(ID);
				State = 645;
				Match(AS);
				State = 646;
				Match(STRING);
				State = 647;
				Match(ID);
				State = 648;
				Match(AS);
				State = 649;
				Match(INTEGER);
				State = 650;
				Match(RIGHTPARENTHESIS);
				State = 651;
				Match(AS);
				State = 652;
				Match(INTEGER);
				State = 653;
				Match(DO);
				State = 655;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 654;
					statement();
					}
					}
					State = 657;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
				State = 659;
				Match(DONE);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 661;
				Match(METHOD);
				State = 662;
				Match(ID);
				State = 663;
				Match(LEFTPARENTHESIS);
				State = 664;
				Match(ID);
				State = 665;
				Match(AS);
				State = 666;
				Match(FLOAT);
				State = 667;
				Match(ID);
				State = 668;
				Match(AS);
				State = 669;
				Match(INTEGER);
				State = 670;
				Match(RIGHTPARENTHESIS);
				State = 671;
				Match(AS);
				State = 672;
				Match(INTEGER);
				State = 673;
				Match(DO);
				State = 675;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 674;
					statement();
					}
					}
					State = 677;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
				State = 679;
				Match(DONE);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 681;
				Match(METHOD);
				State = 682;
				Match(ID);
				State = 683;
				Match(LEFTPARENTHESIS);
				State = 684;
				Match(ID);
				State = 685;
				Match(AS);
				State = 686;
				Match(BOOL);
				State = 687;
				Match(ID);
				State = 688;
				Match(AS);
				State = 689;
				Match(INTEGER);
				State = 690;
				Match(RIGHTPARENTHESIS);
				State = 691;
				Match(AS);
				State = 692;
				Match(INTEGER);
				State = 693;
				Match(DO);
				State = 695;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 694;
					statement();
					}
					}
					State = 697;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
				State = 699;
				Match(DONE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_CALL() { return GetToken(RecipeLanguageParser.FUNCTION_CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(RecipeLanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(RecipeLanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPARENTHESIS() { return GetToken(RecipeLanguageParser.LEFTPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPARENTHESIS() { return GetToken(RecipeLanguageParser.RIGHTPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(RecipeLanguageParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLIT() { return GetToken(RecipeLanguageParser.STRINGLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGERLIT() { return GetToken(RecipeLanguageParser.INTEGERLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATLIT() { return GetToken(RecipeLanguageParser.FLOATLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLLITTRUE() { return GetToken(RecipeLanguageParser.BOOLLITTRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLLITFALSE() { return GetToken(RecipeLanguageParser.BOOLLITFALSE, 0); }
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 22, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 703;
			Match(FUNCTION_CALL);
			State = 704;
			Match(ID);
			State = 705;
			Match(LEFTPARENTHESIS);
			State = 706;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 12953621364736L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 709;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 707;
				Match(ID);
				State = 708;
				Match(ID);
				}
			}

			State = 711;
			Match(RIGHTPARENTHESIS);
			State = 712;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(RecipeLanguageParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(RecipeLanguageParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(RecipeLanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(RecipeLanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(RecipeLanguageParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DONE() { return GetToken(RecipeLanguageParser.DONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEREQUAL() { return GetToken(RecipeLanguageParser.LESSEREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSER() { return GetToken(RecipeLanguageParser.LESSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUAL() { return GetToken(RecipeLanguageParser.GREATEREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(RecipeLanguageParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(RecipeLanguageParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(RecipeLanguageParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGERLIT() { return GetToken(RecipeLanguageParser.INTEGERLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATLIT() { return GetToken(RecipeLanguageParser.FLOATLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLLITTRUE() { return GetToken(RecipeLanguageParser.BOOLLITTRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLLITFALSE() { return GetToken(RecipeLanguageParser.BOOLLITFALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.EnterLoopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.ExitLoopStatement(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_loopStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 714;
			Match(LOOP);
			State = 715;
			Match(WHILE);
			State = 716;
			Match(ID);
			State = 717;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1042284544L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 718;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 12919261626368L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 719;
			Match(DO);
			State = 721;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 720;
				statement();
				}
				}
				State = 723;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
			State = 725;
			Match(DONE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(RecipeLanguageParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(RecipeLanguageParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DONE() { return GetToken(RecipeLanguageParser.DONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(RecipeLanguageParser.ELSE, 0); }
		public ConditionalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.EnterConditionalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.ExitConditionalStatement(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalStatementContext conditionalStatement() {
		ConditionalStatementContext _localctx = new ConditionalStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_conditionalStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 727;
			Match(IF);
			State = 728;
			expression();
			State = 729;
			Match(THEN);
			State = 731;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 730;
				statement();
				}
				}
				State = 733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
			State = 741;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 735;
				Match(ELSE);
				State = 737;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 736;
					statement();
					}
					}
					State = 739;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796101487014L) != 0) );
				}
			}

			State = 743;
			Match(DONE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(RecipeLanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(RecipeLanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(RecipeLanguageParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSER() { return GetToken(RecipeLanguageParser.LESSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(RecipeLanguageParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEREQUAL() { return GetToken(RecipeLanguageParser.LESSEREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUAL() { return GetToken(RecipeLanguageParser.GREATEREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(RecipeLanguageParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLIT() { return GetToken(RecipeLanguageParser.STRINGLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATLIT() { return GetToken(RecipeLanguageParser.FLOATLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTEGERLIT() { return GetTokens(RecipeLanguageParser.INTEGERLIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGERLIT(int i) {
			return GetToken(RecipeLanguageParser.INTEGERLIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLLITTRUE() { return GetToken(RecipeLanguageParser.BOOLLITTRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLLITFALSE() { return GetToken(RecipeLanguageParser.BOOLLITFALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTBRACKET() { return GetToken(RecipeLanguageParser.LEFTBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTBRACKET() { return GetToken(RecipeLanguageParser.RIGHTBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(RecipeLanguageParser.AND, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecipeLanguageListener typedListener = listener as IRecipeLanguageListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_expression);
		int _la;
		try {
			State = 763;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 745;
				Match(ID);
				State = 749;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFTBRACKET) {
					{
					State = 746;
					Match(LEFTBRACKET);
					State = 747;
					Match(ID);
					State = 748;
					Match(RIGHTBRACKET);
					}
				}

				State = 751;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1042284544L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 752;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4157528342528L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 753;
				Match(ID);
				State = 754;
				Match(EQUAL);
				State = 755;
				Match(ID);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 756;
				Match(ID);
				State = 757;
				Match(GREATER);
				State = 758;
				Match(INTEGERLIT);
				State = 759;
				Match(AND);
				State = 760;
				Match(ID);
				State = 761;
				Match(LESSER);
				State = 762;
				Match(INTEGERLIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,53,766,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		1,0,4,0,32,8,0,11,0,12,0,33,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,
		1,46,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,3,3,56,8,3,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,78,8,
		4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,108,8,5,1,6,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,147,
		8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,172,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,282,8,8,1,9,1,9,
		1,9,1,9,4,9,288,8,9,11,9,12,9,289,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,4,10,302,8,10,11,10,12,10,303,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,4,10,316,8,10,11,10,12,10,317,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,4,10,330,8,10,11,10,12,10,331,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,4,10,344,8,10,11,10,12,10,345,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,4,10,
		361,8,10,11,10,12,10,362,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,4,10,378,8,10,11,10,12,10,379,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,4,10,395,8,10,11,10,12,10,
		396,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,4,
		10,412,8,10,11,10,12,10,413,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,4,10,429,8,10,11,10,12,10,430,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,4,10,446,8,10,11,10,12,
		10,447,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		4,10,463,8,10,11,10,12,10,464,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,4,10,480,8,10,11,10,12,10,481,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,4,10,497,8,10,11,10,
		12,10,498,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,4,10,514,8,10,11,10,12,10,515,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,4,10,531,8,10,11,10,12,10,532,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,4,10,548,8,10,11,
		10,12,10,549,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,4,10,565,8,10,11,10,12,10,566,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,1,10,4,10,582,8,10,11,10,12,10,583,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,4,10,599,8,10,
		11,10,12,10,600,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,4,10,616,8,10,11,10,12,10,617,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,4,10,636,8,10,11,10,
		12,10,637,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,4,10,656,8,10,11,10,12,10,657,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,4,10,676,8,
		10,11,10,12,10,677,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,4,10,696,8,10,11,10,12,10,697,1,10,1,10,3,
		10,702,8,10,1,11,1,11,1,11,1,11,1,11,1,11,3,11,710,8,11,1,11,1,11,1,11,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,4,12,722,8,12,11,12,12,12,723,1,12,
		1,12,1,13,1,13,1,13,1,13,4,13,732,8,13,11,13,12,13,733,1,13,1,13,4,13,
		738,8,13,11,13,12,13,739,3,13,742,8,13,1,13,1,13,1,14,1,14,1,14,1,14,3,
		14,750,8,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		3,14,764,8,14,1,14,0,0,15,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,0,4,
		3,0,35,35,38,41,43,43,2,0,21,21,25,29,2,0,38,41,43,43,2,0,35,35,38,41,
		852,0,31,1,0,0,0,2,45,1,0,0,0,4,47,1,0,0,0,6,55,1,0,0,0,8,77,1,0,0,0,10,
		107,1,0,0,0,12,146,1,0,0,0,14,171,1,0,0,0,16,281,1,0,0,0,18,283,1,0,0,
		0,20,701,1,0,0,0,22,703,1,0,0,0,24,714,1,0,0,0,26,727,1,0,0,0,28,763,1,
		0,0,0,30,32,3,2,1,0,31,30,1,0,0,0,32,33,1,0,0,0,33,31,1,0,0,0,33,34,1,
		0,0,0,34,1,1,0,0,0,35,46,3,4,2,0,36,46,3,6,3,0,37,46,3,12,6,0,38,46,3,
		14,7,0,39,46,3,16,8,0,40,46,3,18,9,0,41,46,3,20,10,0,42,46,3,22,11,0,43,
		46,3,24,12,0,44,46,3,26,13,0,45,35,1,0,0,0,45,36,1,0,0,0,45,37,1,0,0,0,
		45,38,1,0,0,0,45,39,1,0,0,0,45,40,1,0,0,0,45,41,1,0,0,0,45,42,1,0,0,0,
		45,43,1,0,0,0,45,44,1,0,0,0,46,3,1,0,0,0,47,48,5,13,0,0,48,49,5,31,0,0,
		49,50,5,43,0,0,50,51,5,32,0,0,51,52,5,30,0,0,52,5,1,0,0,0,53,56,3,8,4,
		0,54,56,3,10,5,0,55,53,1,0,0,0,55,54,1,0,0,0,56,7,1,0,0,0,57,58,5,5,0,
		0,58,59,5,43,0,0,59,60,5,14,0,0,60,61,5,4,0,0,61,78,5,30,0,0,62,63,5,5,
		0,0,63,64,5,43,0,0,64,65,5,14,0,0,65,66,5,3,0,0,66,78,5,30,0,0,67,68,5,
		5,0,0,68,69,5,43,0,0,69,70,5,14,0,0,70,71,5,36,0,0,71,78,5,30,0,0,72,73,
		5,5,0,0,73,74,5,43,0,0,74,75,5,14,0,0,75,76,5,6,0,0,76,78,5,30,0,0,77,
		57,1,0,0,0,77,62,1,0,0,0,77,67,1,0,0,0,77,72,1,0,0,0,78,9,1,0,0,0,79,80,
		5,5,0,0,80,81,5,43,0,0,81,82,5,33,0,0,82,83,5,34,0,0,83,84,5,14,0,0,84,
		85,5,4,0,0,85,108,5,30,0,0,86,87,5,5,0,0,87,88,5,43,0,0,88,89,5,33,0,0,
		89,90,5,34,0,0,90,91,5,14,0,0,91,92,5,3,0,0,92,108,5,30,0,0,93,94,5,5,
		0,0,94,95,5,43,0,0,95,96,5,33,0,0,96,97,5,34,0,0,97,98,5,14,0,0,98,99,
		5,36,0,0,99,108,5,30,0,0,100,101,5,5,0,0,101,102,5,43,0,0,102,103,5,33,
		0,0,103,104,5,34,0,0,104,105,5,14,0,0,105,106,5,6,0,0,106,108,5,30,0,0,
		107,79,1,0,0,0,107,86,1,0,0,0,107,93,1,0,0,0,107,100,1,0,0,0,108,11,1,
		0,0,0,109,110,5,7,0,0,110,111,5,31,0,0,111,112,5,35,0,0,112,113,5,32,0,
		0,113,147,5,30,0,0,114,115,5,7,0,0,115,116,5,31,0,0,116,117,5,38,0,0,117,
		118,5,32,0,0,118,147,5,30,0,0,119,120,5,7,0,0,120,121,5,31,0,0,121,122,
		5,39,0,0,122,123,5,32,0,0,123,147,5,30,0,0,124,125,5,7,0,0,125,126,5,31,
		0,0,126,127,5,40,0,0,127,128,5,32,0,0,128,147,5,30,0,0,129,130,5,7,0,0,
		130,131,5,31,0,0,131,132,5,41,0,0,132,133,5,32,0,0,133,147,5,30,0,0,134,
		135,5,7,0,0,135,136,5,31,0,0,136,137,5,43,0,0,137,138,5,32,0,0,138,147,
		5,30,0,0,139,140,5,7,0,0,140,141,5,31,0,0,141,142,5,35,0,0,142,143,5,17,
		0,0,143,144,5,43,0,0,144,145,5,32,0,0,145,147,5,30,0,0,146,109,1,0,0,0,
		146,114,1,0,0,0,146,119,1,0,0,0,146,124,1,0,0,0,146,129,1,0,0,0,146,134,
		1,0,0,0,146,139,1,0,0,0,147,13,1,0,0,0,148,149,5,8,0,0,149,150,5,38,0,
		0,150,172,5,30,0,0,151,152,5,8,0,0,152,153,5,35,0,0,153,172,5,30,0,0,154,
		155,5,8,0,0,155,156,5,39,0,0,156,172,5,30,0,0,157,158,5,8,0,0,158,159,
		5,40,0,0,159,172,5,30,0,0,160,161,5,8,0,0,161,162,5,41,0,0,162,172,5,30,
		0,0,163,164,5,8,0,0,164,165,5,43,0,0,165,172,5,30,0,0,166,167,5,8,0,0,
		167,168,5,43,0,0,168,169,5,17,0,0,169,170,5,43,0,0,170,172,5,30,0,0,171,
		148,1,0,0,0,171,151,1,0,0,0,171,154,1,0,0,0,171,157,1,0,0,0,171,160,1,
		0,0,0,171,163,1,0,0,0,171,166,1,0,0,0,172,15,1,0,0,0,173,174,5,43,0,0,
		174,175,5,24,0,0,175,176,5,38,0,0,176,282,5,30,0,0,177,178,5,43,0,0,178,
		179,5,24,0,0,179,180,5,39,0,0,180,282,5,30,0,0,181,182,5,43,0,0,182,183,
		5,24,0,0,183,184,5,35,0,0,184,282,5,30,0,0,185,186,5,43,0,0,186,187,5,
		24,0,0,187,188,5,40,0,0,188,282,5,30,0,0,189,190,5,43,0,0,190,191,5,24,
		0,0,191,192,5,41,0,0,192,282,5,30,0,0,193,194,5,43,0,0,194,195,5,24,0,
		0,195,196,5,43,0,0,196,197,5,17,0,0,197,198,5,38,0,0,198,282,5,30,0,0,
		199,200,5,43,0,0,200,201,5,24,0,0,201,202,5,43,0,0,202,203,5,17,0,0,203,
		204,5,39,0,0,204,282,5,30,0,0,205,206,5,43,0,0,206,207,5,24,0,0,207,208,
		5,43,0,0,208,209,5,17,0,0,209,210,5,35,0,0,210,282,5,30,0,0,211,212,5,
		43,0,0,212,213,5,24,0,0,213,214,5,23,0,0,214,215,5,43,0,0,215,216,5,31,
		0,0,216,217,5,43,0,0,217,218,5,43,0,0,218,219,5,32,0,0,219,282,5,30,0,
		0,220,221,5,43,0,0,221,222,5,24,0,0,222,223,5,23,0,0,223,224,5,43,0,0,
		224,225,5,31,0,0,225,226,5,43,0,0,226,227,5,32,0,0,227,282,5,30,0,0,228,
		229,5,43,0,0,229,230,5,24,0,0,230,231,5,43,0,0,231,232,5,17,0,0,232,233,
		5,43,0,0,233,282,5,30,0,0,234,235,5,43,0,0,235,236,5,24,0,0,236,237,5,
		43,0,0,237,238,5,18,0,0,238,239,5,43,0,0,239,282,5,30,0,0,240,241,5,43,
		0,0,241,242,5,24,0,0,242,243,5,43,0,0,243,244,5,20,0,0,244,245,5,43,0,
		0,245,282,5,30,0,0,246,247,5,43,0,0,247,248,5,24,0,0,248,249,5,43,0,0,
		249,250,5,19,0,0,250,251,5,43,0,0,251,282,5,30,0,0,252,253,5,43,0,0,253,
		254,5,24,0,0,254,255,5,35,0,0,255,256,5,17,0,0,256,257,5,43,0,0,257,258,
		5,17,0,0,258,259,5,35,0,0,259,282,5,30,0,0,260,261,5,43,0,0,261,262,5,
		33,0,0,262,263,5,38,0,0,263,264,5,34,0,0,264,265,5,24,0,0,265,266,5,35,
		0,0,266,282,5,30,0,0,267,268,5,43,0,0,268,269,5,33,0,0,269,270,5,38,0,
		0,270,271,5,34,0,0,271,272,5,24,0,0,272,273,5,39,0,0,273,282,5,30,0,0,
		274,275,5,43,0,0,275,276,5,33,0,0,276,277,5,38,0,0,277,278,5,34,0,0,278,
		279,5,24,0,0,279,280,5,38,0,0,280,282,5,30,0,0,281,173,1,0,0,0,281,177,
		1,0,0,0,281,181,1,0,0,0,281,185,1,0,0,0,281,189,1,0,0,0,281,193,1,0,0,
		0,281,199,1,0,0,0,281,205,1,0,0,0,281,211,1,0,0,0,281,220,1,0,0,0,281,
		228,1,0,0,0,281,234,1,0,0,0,281,240,1,0,0,0,281,246,1,0,0,0,281,252,1,
		0,0,0,281,260,1,0,0,0,281,267,1,0,0,0,281,274,1,0,0,0,282,17,1,0,0,0,283,
		284,5,1,0,0,284,285,5,43,0,0,285,287,5,15,0,0,286,288,3,2,1,0,287,286,
		1,0,0,0,288,289,1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,291,1,0,0,
		0,291,292,5,10,0,0,292,19,1,0,0,0,293,294,5,2,0,0,294,295,5,43,0,0,295,
		296,5,31,0,0,296,297,5,32,0,0,297,298,5,14,0,0,298,299,5,3,0,0,299,301,
		5,15,0,0,300,302,3,2,1,0,301,300,1,0,0,0,302,303,1,0,0,0,303,301,1,0,0,
		0,303,304,1,0,0,0,304,305,1,0,0,0,305,306,5,10,0,0,306,702,1,0,0,0,307,
		308,5,2,0,0,308,309,5,43,0,0,309,310,5,31,0,0,310,311,5,32,0,0,311,312,
		5,14,0,0,312,313,5,4,0,0,313,315,5,15,0,0,314,316,3,2,1,0,315,314,1,0,
		0,0,316,317,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,319,1,0,0,0,319,
		320,5,10,0,0,320,702,1,0,0,0,321,322,5,2,0,0,322,323,5,43,0,0,323,324,
		5,31,0,0,324,325,5,32,0,0,325,326,5,14,0,0,326,327,5,6,0,0,327,329,5,15,
		0,0,328,330,3,2,1,0,329,328,1,0,0,0,330,331,1,0,0,0,331,329,1,0,0,0,331,
		332,1,0,0,0,332,333,1,0,0,0,333,334,5,10,0,0,334,702,1,0,0,0,335,336,5,
		2,0,0,336,337,5,43,0,0,337,338,5,31,0,0,338,339,5,32,0,0,339,340,5,14,
		0,0,340,341,5,36,0,0,341,343,5,15,0,0,342,344,3,2,1,0,343,342,1,0,0,0,
		344,345,1,0,0,0,345,343,1,0,0,0,345,346,1,0,0,0,346,347,1,0,0,0,347,348,
		5,10,0,0,348,702,1,0,0,0,349,350,5,2,0,0,350,351,5,43,0,0,351,352,5,31,
		0,0,352,353,5,43,0,0,353,354,5,14,0,0,354,355,5,4,0,0,355,356,5,32,0,0,
		356,357,5,14,0,0,357,358,5,3,0,0,358,360,5,15,0,0,359,361,3,2,1,0,360,
		359,1,0,0,0,361,362,1,0,0,0,362,360,1,0,0,0,362,363,1,0,0,0,363,364,1,
		0,0,0,364,365,5,10,0,0,365,702,1,0,0,0,366,367,5,2,0,0,367,368,5,43,0,
		0,368,369,5,31,0,0,369,370,5,43,0,0,370,371,5,14,0,0,371,372,5,6,0,0,372,
		373,5,32,0,0,373,374,5,14,0,0,374,375,5,3,0,0,375,377,5,15,0,0,376,378,
		3,2,1,0,377,376,1,0,0,0,378,379,1,0,0,0,379,377,1,0,0,0,379,380,1,0,0,
		0,380,381,1,0,0,0,381,382,5,10,0,0,382,702,1,0,0,0,383,384,5,2,0,0,384,
		385,5,43,0,0,385,386,5,31,0,0,386,387,5,43,0,0,387,388,5,14,0,0,388,389,
		5,3,0,0,389,390,5,32,0,0,390,391,5,14,0,0,391,392,5,3,0,0,392,394,5,15,
		0,0,393,395,3,2,1,0,394,393,1,0,0,0,395,396,1,0,0,0,396,394,1,0,0,0,396,
		397,1,0,0,0,397,398,1,0,0,0,398,399,5,10,0,0,399,702,1,0,0,0,400,401,5,
		2,0,0,401,402,5,43,0,0,402,403,5,31,0,0,403,404,5,43,0,0,404,405,5,14,
		0,0,405,406,5,36,0,0,406,407,5,32,0,0,407,408,5,14,0,0,408,409,5,3,0,0,
		409,411,5,15,0,0,410,412,3,2,1,0,411,410,1,0,0,0,412,413,1,0,0,0,413,411,
		1,0,0,0,413,414,1,0,0,0,414,415,1,0,0,0,415,416,5,10,0,0,416,702,1,0,0,
		0,417,418,5,2,0,0,418,419,5,43,0,0,419,420,5,31,0,0,420,421,5,43,0,0,421,
		422,5,14,0,0,422,423,5,4,0,0,423,424,5,32,0,0,424,425,5,14,0,0,425,426,
		5,4,0,0,426,428,5,15,0,0,427,429,3,2,1,0,428,427,1,0,0,0,429,430,1,0,0,
		0,430,428,1,0,0,0,430,431,1,0,0,0,431,432,1,0,0,0,432,433,5,10,0,0,433,
		702,1,0,0,0,434,435,5,2,0,0,435,436,5,43,0,0,436,437,5,31,0,0,437,438,
		5,43,0,0,438,439,5,14,0,0,439,440,5,6,0,0,440,441,5,32,0,0,441,442,5,14,
		0,0,442,443,5,4,0,0,443,445,5,15,0,0,444,446,3,2,1,0,445,444,1,0,0,0,446,
		447,1,0,0,0,447,445,1,0,0,0,447,448,1,0,0,0,448,449,1,0,0,0,449,450,5,
		10,0,0,450,702,1,0,0,0,451,452,5,2,0,0,452,453,5,43,0,0,453,454,5,31,0,
		0,454,455,5,43,0,0,455,456,5,14,0,0,456,457,5,3,0,0,457,458,5,32,0,0,458,
		459,5,14,0,0,459,460,5,4,0,0,460,462,5,15,0,0,461,463,3,2,1,0,462,461,
		1,0,0,0,463,464,1,0,0,0,464,462,1,0,0,0,464,465,1,0,0,0,465,466,1,0,0,
		0,466,467,5,10,0,0,467,702,1,0,0,0,468,469,5,2,0,0,469,470,5,43,0,0,470,
		471,5,31,0,0,471,472,5,43,0,0,472,473,5,14,0,0,473,474,5,36,0,0,474,475,
		5,32,0,0,475,476,5,14,0,0,476,477,5,4,0,0,477,479,5,15,0,0,478,480,3,2,
		1,0,479,478,1,0,0,0,480,481,1,0,0,0,481,479,1,0,0,0,481,482,1,0,0,0,482,
		483,1,0,0,0,483,484,5,10,0,0,484,702,1,0,0,0,485,486,5,2,0,0,486,487,5,
		43,0,0,487,488,5,31,0,0,488,489,5,43,0,0,489,490,5,14,0,0,490,491,5,4,
		0,0,491,492,5,32,0,0,492,493,5,14,0,0,493,494,5,6,0,0,494,496,5,15,0,0,
		495,497,3,2,1,0,496,495,1,0,0,0,497,498,1,0,0,0,498,496,1,0,0,0,498,499,
		1,0,0,0,499,500,1,0,0,0,500,501,5,10,0,0,501,702,1,0,0,0,502,503,5,2,0,
		0,503,504,5,43,0,0,504,505,5,31,0,0,505,506,5,43,0,0,506,507,5,14,0,0,
		507,508,5,6,0,0,508,509,5,32,0,0,509,510,5,14,0,0,510,511,5,6,0,0,511,
		513,5,15,0,0,512,514,3,2,1,0,513,512,1,0,0,0,514,515,1,0,0,0,515,513,1,
		0,0,0,515,516,1,0,0,0,516,517,1,0,0,0,517,518,5,10,0,0,518,702,1,0,0,0,
		519,520,5,2,0,0,520,521,5,43,0,0,521,522,5,31,0,0,522,523,5,43,0,0,523,
		524,5,14,0,0,524,525,5,3,0,0,525,526,5,32,0,0,526,527,5,14,0,0,527,528,
		5,6,0,0,528,530,5,15,0,0,529,531,3,2,1,0,530,529,1,0,0,0,531,532,1,0,0,
		0,532,530,1,0,0,0,532,533,1,0,0,0,533,534,1,0,0,0,534,535,5,10,0,0,535,
		702,1,0,0,0,536,537,5,2,0,0,537,538,5,43,0,0,538,539,5,31,0,0,539,540,
		5,43,0,0,540,541,5,14,0,0,541,542,5,36,0,0,542,543,5,32,0,0,543,544,5,
		14,0,0,544,545,5,6,0,0,545,547,5,15,0,0,546,548,3,2,1,0,547,546,1,0,0,
		0,548,549,1,0,0,0,549,547,1,0,0,0,549,550,1,0,0,0,550,551,1,0,0,0,551,
		552,5,10,0,0,552,702,1,0,0,0,553,554,5,2,0,0,554,555,5,43,0,0,555,556,
		5,31,0,0,556,557,5,43,0,0,557,558,5,14,0,0,558,559,5,4,0,0,559,560,5,32,
		0,0,560,561,5,14,0,0,561,562,5,36,0,0,562,564,5,15,0,0,563,565,3,2,1,0,
		564,563,1,0,0,0,565,566,1,0,0,0,566,564,1,0,0,0,566,567,1,0,0,0,567,568,
		1,0,0,0,568,569,5,10,0,0,569,702,1,0,0,0,570,571,5,2,0,0,571,572,5,43,
		0,0,572,573,5,31,0,0,573,574,5,43,0,0,574,575,5,14,0,0,575,576,5,6,0,0,
		576,577,5,32,0,0,577,578,5,14,0,0,578,579,5,36,0,0,579,581,5,15,0,0,580,
		582,3,2,1,0,581,580,1,0,0,0,582,583,1,0,0,0,583,581,1,0,0,0,583,584,1,
		0,0,0,584,585,1,0,0,0,585,586,5,10,0,0,586,702,1,0,0,0,587,588,5,2,0,0,
		588,589,5,43,0,0,589,590,5,31,0,0,590,591,5,43,0,0,591,592,5,14,0,0,592,
		593,5,3,0,0,593,594,5,32,0,0,594,595,5,14,0,0,595,596,5,36,0,0,596,598,
		5,15,0,0,597,599,3,2,1,0,598,597,1,0,0,0,599,600,1,0,0,0,600,598,1,0,0,
		0,600,601,1,0,0,0,601,602,1,0,0,0,602,603,5,10,0,0,603,702,1,0,0,0,604,
		605,5,2,0,0,605,606,5,43,0,0,606,607,5,31,0,0,607,608,5,43,0,0,608,609,
		5,14,0,0,609,610,5,36,0,0,610,611,5,32,0,0,611,612,5,14,0,0,612,613,5,
		36,0,0,613,615,5,15,0,0,614,616,3,2,1,0,615,614,1,0,0,0,616,617,1,0,0,
		0,617,615,1,0,0,0,617,618,1,0,0,0,618,619,1,0,0,0,619,620,5,10,0,0,620,
		702,1,0,0,0,621,622,5,2,0,0,622,623,5,43,0,0,623,624,5,31,0,0,624,625,
		5,43,0,0,625,626,5,14,0,0,626,627,5,3,0,0,627,628,5,43,0,0,628,629,5,14,
		0,0,629,630,5,3,0,0,630,631,5,32,0,0,631,632,5,14,0,0,632,633,5,3,0,0,
		633,635,5,15,0,0,634,636,3,2,1,0,635,634,1,0,0,0,636,637,1,0,0,0,637,635,
		1,0,0,0,637,638,1,0,0,0,638,639,1,0,0,0,639,640,5,10,0,0,640,702,1,0,0,
		0,641,642,5,2,0,0,642,643,5,43,0,0,643,644,5,31,0,0,644,645,5,43,0,0,645,
		646,5,14,0,0,646,647,5,4,0,0,647,648,5,43,0,0,648,649,5,14,0,0,649,650,
		5,3,0,0,650,651,5,32,0,0,651,652,5,14,0,0,652,653,5,3,0,0,653,655,5,15,
		0,0,654,656,3,2,1,0,655,654,1,0,0,0,656,657,1,0,0,0,657,655,1,0,0,0,657,
		658,1,0,0,0,658,659,1,0,0,0,659,660,5,10,0,0,660,702,1,0,0,0,661,662,5,
		2,0,0,662,663,5,43,0,0,663,664,5,31,0,0,664,665,5,43,0,0,665,666,5,14,
		0,0,666,667,5,6,0,0,667,668,5,43,0,0,668,669,5,14,0,0,669,670,5,3,0,0,
		670,671,5,32,0,0,671,672,5,14,0,0,672,673,5,3,0,0,673,675,5,15,0,0,674,
		676,3,2,1,0,675,674,1,0,0,0,676,677,1,0,0,0,677,675,1,0,0,0,677,678,1,
		0,0,0,678,679,1,0,0,0,679,680,5,10,0,0,680,702,1,0,0,0,681,682,5,2,0,0,
		682,683,5,43,0,0,683,684,5,31,0,0,684,685,5,43,0,0,685,686,5,14,0,0,686,
		687,5,36,0,0,687,688,5,43,0,0,688,689,5,14,0,0,689,690,5,3,0,0,690,691,
		5,32,0,0,691,692,5,14,0,0,692,693,5,3,0,0,693,695,5,15,0,0,694,696,3,2,
		1,0,695,694,1,0,0,0,696,697,1,0,0,0,697,695,1,0,0,0,697,698,1,0,0,0,698,
		699,1,0,0,0,699,700,5,10,0,0,700,702,1,0,0,0,701,293,1,0,0,0,701,307,1,
		0,0,0,701,321,1,0,0,0,701,335,1,0,0,0,701,349,1,0,0,0,701,366,1,0,0,0,
		701,383,1,0,0,0,701,400,1,0,0,0,701,417,1,0,0,0,701,434,1,0,0,0,701,451,
		1,0,0,0,701,468,1,0,0,0,701,485,1,0,0,0,701,502,1,0,0,0,701,519,1,0,0,
		0,701,536,1,0,0,0,701,553,1,0,0,0,701,570,1,0,0,0,701,587,1,0,0,0,701,
		604,1,0,0,0,701,621,1,0,0,0,701,641,1,0,0,0,701,661,1,0,0,0,701,681,1,
		0,0,0,702,21,1,0,0,0,703,704,5,23,0,0,704,705,5,43,0,0,705,706,5,31,0,
		0,706,709,7,0,0,0,707,708,5,43,0,0,708,710,5,43,0,0,709,707,1,0,0,0,709,
		710,1,0,0,0,710,711,1,0,0,0,711,712,5,32,0,0,712,713,5,30,0,0,713,23,1,
		0,0,0,714,715,5,11,0,0,715,716,5,9,0,0,716,717,5,43,0,0,717,718,7,1,0,
		0,718,719,7,2,0,0,719,721,5,15,0,0,720,722,3,2,1,0,721,720,1,0,0,0,722,
		723,1,0,0,0,723,721,1,0,0,0,723,724,1,0,0,0,724,725,1,0,0,0,725,726,5,
		10,0,0,726,25,1,0,0,0,727,728,5,16,0,0,728,729,3,28,14,0,729,731,5,22,
		0,0,730,732,3,2,1,0,731,730,1,0,0,0,732,733,1,0,0,0,733,731,1,0,0,0,733,
		734,1,0,0,0,734,741,1,0,0,0,735,737,5,12,0,0,736,738,3,2,1,0,737,736,1,
		0,0,0,738,739,1,0,0,0,739,737,1,0,0,0,739,740,1,0,0,0,740,742,1,0,0,0,
		741,735,1,0,0,0,741,742,1,0,0,0,742,743,1,0,0,0,743,744,5,10,0,0,744,27,
		1,0,0,0,745,749,5,43,0,0,746,747,5,33,0,0,747,748,5,43,0,0,748,750,5,34,
		0,0,749,746,1,0,0,0,749,750,1,0,0,0,750,751,1,0,0,0,751,752,7,1,0,0,752,
		764,7,3,0,0,753,754,5,43,0,0,754,755,5,21,0,0,755,764,5,43,0,0,756,757,
		5,43,0,0,757,758,5,28,0,0,758,759,5,38,0,0,759,760,5,37,0,0,760,761,5,
		43,0,0,761,762,5,29,0,0,762,764,5,38,0,0,763,745,1,0,0,0,763,753,1,0,0,
		0,763,756,1,0,0,0,764,29,1,0,0,0,41,33,45,55,77,107,146,171,281,289,303,
		317,331,345,362,379,396,413,430,447,464,481,498,515,532,549,566,583,600,
		617,637,657,677,697,701,709,723,733,739,741,749,763
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
