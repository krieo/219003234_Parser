//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from RecipeLanguage.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class RecipeLanguageLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		RECIPE=1, ID=2, DO=3, METHOD=4, LEFTPARENTHESIS=5, RIGHTPARENTHESIS=6, 
		AS=7, INTEGER=8, INGREDIENT=9, STRING=10, SEMICOLON=11, ASK=12, ASSIGN=13, 
		STRINGLIT=14, PLUS=15, SPEAK=16, SHARE=17, INTEGERLIT=18, DONE=19, WS=20;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"RECIPE", "ID", "DO", "METHOD", "LEFTPARENTHESIS", "RIGHTPARENTHESIS", 
		"AS", "INTEGER", "INGREDIENT", "STRING", "SEMICOLON", "ASK", "ASSIGN", 
		"STRINGLIT", "PLUS", "SPEAK", "SHARE", "INTEGERLIT", "DONE", "WS"
	};


	public RecipeLanguageLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public RecipeLanguageLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'RECIPE'", "'ID'", "'DO'", "'METHOD'", "'LEFTPARENTHESIS'", "'RIGHTPARENTHESIS'", 
		"'AS'", "'INTEGER'", "'INGREDIENT'", "'STRING'", "'SEMICOLON'", "'ASK'", 
		"'ASSIGN'", "'STRINGLIT'", "'PLUS'", "'SPEAK'", "'SHARE'", "'INTEGERLIT'", 
		"'DONE'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "RECIPE", "ID", "DO", "METHOD", "LEFTPARENTHESIS", "RIGHTPARENTHESIS", 
		"AS", "INTEGER", "INGREDIENT", "STRING", "SEMICOLON", "ASK", "ASSIGN", 
		"STRINGLIT", "PLUS", "SPEAK", "SHARE", "INTEGERLIT", "DONE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RecipeLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RecipeLanguageLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,20,194,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
		1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,
		1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,
		1,19,4,19,189,8,19,11,19,12,19,190,1,19,1,19,0,0,20,1,1,3,2,5,3,7,4,9,
		5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
		35,18,37,19,39,20,1,0,1,3,0,9,10,13,13,32,32,194,0,1,1,0,0,0,0,3,1,0,0,
		0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
		0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
		0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
		1,0,0,0,0,39,1,0,0,0,1,41,1,0,0,0,3,48,1,0,0,0,5,51,1,0,0,0,7,54,1,0,0,
		0,9,61,1,0,0,0,11,77,1,0,0,0,13,94,1,0,0,0,15,97,1,0,0,0,17,105,1,0,0,
		0,19,116,1,0,0,0,21,123,1,0,0,0,23,133,1,0,0,0,25,137,1,0,0,0,27,144,1,
		0,0,0,29,154,1,0,0,0,31,159,1,0,0,0,33,165,1,0,0,0,35,171,1,0,0,0,37,182,
		1,0,0,0,39,188,1,0,0,0,41,42,5,82,0,0,42,43,5,69,0,0,43,44,5,67,0,0,44,
		45,5,73,0,0,45,46,5,80,0,0,46,47,5,69,0,0,47,2,1,0,0,0,48,49,5,73,0,0,
		49,50,5,68,0,0,50,4,1,0,0,0,51,52,5,68,0,0,52,53,5,79,0,0,53,6,1,0,0,0,
		54,55,5,77,0,0,55,56,5,69,0,0,56,57,5,84,0,0,57,58,5,72,0,0,58,59,5,79,
		0,0,59,60,5,68,0,0,60,8,1,0,0,0,61,62,5,76,0,0,62,63,5,69,0,0,63,64,5,
		70,0,0,64,65,5,84,0,0,65,66,5,80,0,0,66,67,5,65,0,0,67,68,5,82,0,0,68,
		69,5,69,0,0,69,70,5,78,0,0,70,71,5,84,0,0,71,72,5,72,0,0,72,73,5,69,0,
		0,73,74,5,83,0,0,74,75,5,73,0,0,75,76,5,83,0,0,76,10,1,0,0,0,77,78,5,82,
		0,0,78,79,5,73,0,0,79,80,5,71,0,0,80,81,5,72,0,0,81,82,5,84,0,0,82,83,
		5,80,0,0,83,84,5,65,0,0,84,85,5,82,0,0,85,86,5,69,0,0,86,87,5,78,0,0,87,
		88,5,84,0,0,88,89,5,72,0,0,89,90,5,69,0,0,90,91,5,83,0,0,91,92,5,73,0,
		0,92,93,5,83,0,0,93,12,1,0,0,0,94,95,5,65,0,0,95,96,5,83,0,0,96,14,1,0,
		0,0,97,98,5,73,0,0,98,99,5,78,0,0,99,100,5,84,0,0,100,101,5,69,0,0,101,
		102,5,71,0,0,102,103,5,69,0,0,103,104,5,82,0,0,104,16,1,0,0,0,105,106,
		5,73,0,0,106,107,5,78,0,0,107,108,5,71,0,0,108,109,5,82,0,0,109,110,5,
		69,0,0,110,111,5,68,0,0,111,112,5,73,0,0,112,113,5,69,0,0,113,114,5,78,
		0,0,114,115,5,84,0,0,115,18,1,0,0,0,116,117,5,83,0,0,117,118,5,84,0,0,
		118,119,5,82,0,0,119,120,5,73,0,0,120,121,5,78,0,0,121,122,5,71,0,0,122,
		20,1,0,0,0,123,124,5,83,0,0,124,125,5,69,0,0,125,126,5,77,0,0,126,127,
		5,73,0,0,127,128,5,67,0,0,128,129,5,79,0,0,129,130,5,76,0,0,130,131,5,
		79,0,0,131,132,5,78,0,0,132,22,1,0,0,0,133,134,5,65,0,0,134,135,5,83,0,
		0,135,136,5,75,0,0,136,24,1,0,0,0,137,138,5,65,0,0,138,139,5,83,0,0,139,
		140,5,83,0,0,140,141,5,73,0,0,141,142,5,71,0,0,142,143,5,78,0,0,143,26,
		1,0,0,0,144,145,5,83,0,0,145,146,5,84,0,0,146,147,5,82,0,0,147,148,5,73,
		0,0,148,149,5,78,0,0,149,150,5,71,0,0,150,151,5,76,0,0,151,152,5,73,0,
		0,152,153,5,84,0,0,153,28,1,0,0,0,154,155,5,80,0,0,155,156,5,76,0,0,156,
		157,5,85,0,0,157,158,5,83,0,0,158,30,1,0,0,0,159,160,5,83,0,0,160,161,
		5,80,0,0,161,162,5,69,0,0,162,163,5,65,0,0,163,164,5,75,0,0,164,32,1,0,
		0,0,165,166,5,83,0,0,166,167,5,72,0,0,167,168,5,65,0,0,168,169,5,82,0,
		0,169,170,5,69,0,0,170,34,1,0,0,0,171,172,5,73,0,0,172,173,5,78,0,0,173,
		174,5,84,0,0,174,175,5,69,0,0,175,176,5,71,0,0,176,177,5,69,0,0,177,178,
		5,82,0,0,178,179,5,76,0,0,179,180,5,73,0,0,180,181,5,84,0,0,181,36,1,0,
		0,0,182,183,5,68,0,0,183,184,5,79,0,0,184,185,5,78,0,0,185,186,5,69,0,
		0,186,38,1,0,0,0,187,189,7,0,0,0,188,187,1,0,0,0,189,190,1,0,0,0,190,188,
		1,0,0,0,190,191,1,0,0,0,191,192,1,0,0,0,192,193,6,19,0,0,193,40,1,0,0,
		0,2,0,190,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
