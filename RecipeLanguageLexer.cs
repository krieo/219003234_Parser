//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from RecipeLanguage.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class RecipeLanguageLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		RECIPE=1, DO=2, METHOD=3, ID=4, LEFTPARENTHESIS=5, RIGHTPARENTHESIS=6, 
		AS=7, INTEGER=8, INGREDIENT=9, STRING=10, SEMICOLON=11, ASK=12, ASSIGN=13, 
		STRINGLIT=14, PLUS=15, SPEAK=16, SHARE=17, INTEGERLIT=18, DONE=19;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"RECIPE", "DO", "METHOD", "ID", "LEFTPARENTHESIS", "RIGHTPARENTHESIS", 
		"AS", "INTEGER", "INGREDIENT", "STRING", "SEMICOLON", "ASK", "ASSIGN", 
		"STRINGLIT", "PLUS", "SPEAK", "SHARE", "INTEGERLIT", "DONE"
	};


	public RecipeLanguageLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public RecipeLanguageLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'RECIPE'", "'DO'", "'METHOD'", null, "'('", "')'", "'AS'", "'INTEGER'", 
		"'INGREDIENT'", "'STRING'", "';'", "'ASK'", "'ASSIGN'", null, "'+'", "'SPEAK'", 
		"'SHARE'", null, "'DONE'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "RECIPE", "DO", "METHOD", "ID", "LEFTPARENTHESIS", "RIGHTPARENTHESIS", 
		"AS", "INTEGER", "INGREDIENT", "STRING", "SEMICOLON", "ASK", "ASSIGN", 
		"STRINGLIT", "PLUS", "SPEAK", "SHARE", "INTEGERLIT", "DONE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RecipeLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RecipeLanguageLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,19,142,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,0,1,0,1,0,1,0,1,0,1,
		0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,5,3,59,8,3,10,3,12,3,
		62,9,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
		10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,
		13,5,13,112,8,13,10,13,12,13,115,9,13,1,13,1,13,1,14,1,14,1,15,1,15,1,
		15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,4,17,134,8,17,11,
		17,12,17,135,1,18,1,18,1,18,1,18,1,18,1,113,0,19,1,1,3,2,5,3,7,4,9,5,11,
		6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
		37,19,1,0,3,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,
		57,144,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
		1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
		0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
		1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,1,39,1,0,0,0,3,46,1,0,0,0,5,49,1,0,0,
		0,7,56,1,0,0,0,9,63,1,0,0,0,11,65,1,0,0,0,13,67,1,0,0,0,15,70,1,0,0,0,
		17,78,1,0,0,0,19,89,1,0,0,0,21,96,1,0,0,0,23,98,1,0,0,0,25,102,1,0,0,0,
		27,109,1,0,0,0,29,118,1,0,0,0,31,120,1,0,0,0,33,126,1,0,0,0,35,133,1,0,
		0,0,37,137,1,0,0,0,39,40,5,82,0,0,40,41,5,69,0,0,41,42,5,67,0,0,42,43,
		5,73,0,0,43,44,5,80,0,0,44,45,5,69,0,0,45,2,1,0,0,0,46,47,5,68,0,0,47,
		48,5,79,0,0,48,4,1,0,0,0,49,50,5,77,0,0,50,51,5,69,0,0,51,52,5,84,0,0,
		52,53,5,72,0,0,53,54,5,79,0,0,54,55,5,68,0,0,55,6,1,0,0,0,56,60,7,0,0,
		0,57,59,7,1,0,0,58,57,1,0,0,0,59,62,1,0,0,0,60,58,1,0,0,0,60,61,1,0,0,
		0,61,8,1,0,0,0,62,60,1,0,0,0,63,64,5,40,0,0,64,10,1,0,0,0,65,66,5,41,0,
		0,66,12,1,0,0,0,67,68,5,65,0,0,68,69,5,83,0,0,69,14,1,0,0,0,70,71,5,73,
		0,0,71,72,5,78,0,0,72,73,5,84,0,0,73,74,5,69,0,0,74,75,5,71,0,0,75,76,
		5,69,0,0,76,77,5,82,0,0,77,16,1,0,0,0,78,79,5,73,0,0,79,80,5,78,0,0,80,
		81,5,71,0,0,81,82,5,82,0,0,82,83,5,69,0,0,83,84,5,68,0,0,84,85,5,73,0,
		0,85,86,5,69,0,0,86,87,5,78,0,0,87,88,5,84,0,0,88,18,1,0,0,0,89,90,5,83,
		0,0,90,91,5,84,0,0,91,92,5,82,0,0,92,93,5,73,0,0,93,94,5,78,0,0,94,95,
		5,71,0,0,95,20,1,0,0,0,96,97,5,59,0,0,97,22,1,0,0,0,98,99,5,65,0,0,99,
		100,5,83,0,0,100,101,5,75,0,0,101,24,1,0,0,0,102,103,5,65,0,0,103,104,
		5,83,0,0,104,105,5,83,0,0,105,106,5,73,0,0,106,107,5,71,0,0,107,108,5,
		78,0,0,108,26,1,0,0,0,109,113,5,34,0,0,110,112,9,0,0,0,111,110,1,0,0,0,
		112,115,1,0,0,0,113,114,1,0,0,0,113,111,1,0,0,0,114,116,1,0,0,0,115,113,
		1,0,0,0,116,117,5,34,0,0,117,28,1,0,0,0,118,119,5,43,0,0,119,30,1,0,0,
		0,120,121,5,83,0,0,121,122,5,80,0,0,122,123,5,69,0,0,123,124,5,65,0,0,
		124,125,5,75,0,0,125,32,1,0,0,0,126,127,5,83,0,0,127,128,5,72,0,0,128,
		129,5,65,0,0,129,130,5,82,0,0,130,131,5,69,0,0,131,34,1,0,0,0,132,134,
		7,2,0,0,133,132,1,0,0,0,134,135,1,0,0,0,135,133,1,0,0,0,135,136,1,0,0,
		0,136,36,1,0,0,0,137,138,5,68,0,0,138,139,5,79,0,0,139,140,5,78,0,0,140,
		141,5,69,0,0,141,38,1,0,0,0,4,0,60,113,135,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
